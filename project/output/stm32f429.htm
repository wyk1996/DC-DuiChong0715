<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\stm32f429.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\stm32f429.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Jan 26 13:21:54 2021
<BR><P>
<H3>Maximum Stack Usage =        464 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Task4GSend &rArr; HFQG_SendStartAck &rArr; HFQGFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1e8]">OS_CPU_SR_Save</a>
 <LI><a href="#[1ea]">OS_CPU_SR_Restore</a>
 <LI><a href="#[2d2]">OSStartHighRdy</a>
 <LI><a href="#[2f4]">OSCtxSw</a>
 <LI><a href="#[2c1]">OSIntCtxSw</a>
 <LI><a href="#[b3]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c7]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c7]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c7]">ADC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[15c]">ADJust_ControlGunA</a> from connectccu_main.o(i.ADJust_ControlGunA) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[164]">ADJust_ControlGunB</a> from connectccu_main.o(i.ADJust_ControlGunB) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[af]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[c9]">CAN1_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[ca]">CAN1_RX1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[cb]">CAN1_SCE_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[c8]">CAN1_TX_IRQHandler</a> from stm32f4xx_it.o(i.CAN1_TX_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[f5]">CAN2_RX0_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[f6]">CAN2_RX1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[f7]">CAN2_SCE_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[f4]">CAN2_TX_IRQHandler</a> from stm32f4xx_it.o(i.CAN2_TX_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[104]">CRYP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[157]">ChargeStart_ControlGunA</a> from connectccu_main.o(i.ChargeStart_ControlGunA) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[15f]">ChargeStart_ControlGunB</a> from connectccu_main.o(i.ChargeStart_ControlGunB) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[158]">ChargeStop_ControlGunA</a> from connectccu_main.o(i.ChargeStop_ControlGunA) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[160]">ChargeStop_ControlGunB</a> from connectccu_main.o(i.ChargeStop_ControlGunB) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[103]">DCMI_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[c0]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[c1]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[c2]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[c3]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[c4]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[c5]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[c6]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[e4]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[ed]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[ee]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[ef]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[f0]">DMA2_Stream3_IRQHandler</a> from bsp_sdio_sd.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[f1]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[f9]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[fa]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[fb]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[b2]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[f2]">ETH_IRQHandler</a> from stm32f4xx_it.o(i.ETH_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[f3]">ETH_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[bb]">EXTI0_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[dd]">EXTI15_10_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[bc]">EXTI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[bd]">EXTI2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[be]">EXTI3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[bf]">EXTI4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[cc]">EXTI9_5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[155]">ElecLocked_ControlGunA</a> from connectccu_main.o(i.ElecLocked_ControlGunA) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[15d]">ElecLocked_ControlGunB</a> from connectccu_main.o(i.ElecLocked_ControlGunB) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[156]">ElecUnLocked_ControlGunA</a> from connectccu_main.o(i.ElecUnLocked_ControlGunA) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[15e]">ElecUnLocked_ControlGunB</a> from connectccu_main.o(i.ElecUnLocked_ControlGunB) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[b9]">FLASH_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[106]">FPU_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[e5]">FSMC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[152]">GDW_ErrFrame</a> from connectccu_frame.o(i.GDW_ErrFrame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[151]">GDW_HeartFrame</a> from connectccu_frame.o(i.GDW_HeartFrame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[153]">GDW_JustFrame</a> from connectccu_frame.o(i.GDW_JustFrame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[14a]">GDW_PowerConfigFrame</a> from connectccu_frame.o(i.GDW_PowerConfigFrame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[14f]">GDW_ReStartOverFrame</a> from connectccu_frame.o(i.GDW_ReStartOverFrame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[150]">GDW_ReStopOverFrame</a> from connectccu_frame.o(i.GDW_ReStopOverFrame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[149]">GDW_SDDZLockFrame</a> from connectccu_frame.o(i.GDW_SDDZLockFrame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[14c]">GDW_SDHandStartFrame</a> from connectccu_frame.o(i.GDW_SDHandStartFrame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[14b]">GDW_SDSYSConfig1Frame</a> from connectccu_frame.o(i.GDW_SDSYSConfig1Frame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[14d]">GDW_SDSYSConfig2Frame</a> from connectccu_frame.o(i.GDW_SDSYSConfig2Frame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[14e]">GDW_SDSYSConfig3Frame</a> from connectccu_frame.o(i.GDW_SDSYSConfig3Frame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[148]">GDW_SDServiceFrame</a> from connectccu_frame.o(i.GDW_SDServiceFrame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[146]">GDW_SDTimeSetFrame</a> from connectccu_frame.o(i.GDW_SDTimeSetFrame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[147]">GDW_SDVersionFrame</a> from connectccu_frame.o(i.GDW_SDVersionFrame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[144]">GDW_StartFrame</a> from connectccu_frame.o(i.GDW_StartFrame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[145]">GDW_StopFrame</a> from connectccu_frame.o(i.GDW_StopFrame) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[105]">HASH_RNG_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[aa]">HFQG_RecvBillAck</a> from hfqgframe.o(i.HFQG_RecvBillAck) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[a6]">HFQG_RecvChargeInfoAck</a> from hfqgframe.o(i.HFQG_RecvChargeInfoAck) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[a7]">HFQG_RecvChargeInfoQuery</a> from hfqgframe.o(i.HFQG_RecvChargeInfoQuery) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[a3]">HFQG_RecvDevStateAck</a> from hfqgframe.o(i.HFQG_RecvDevStateAck) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[a4]">HFQG_RecvDevStateQuery</a> from hfqgframe.o(i.HFQG_RecvDevStateQuery) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[a2]">HFQG_RecvHearAck</a> from hfqgframe.o(i.HFQG_RecvHearAck) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[a1]">HFQG_RecvRegisterAck</a> from hfqgframe.o(i.HFQG_RecvRegisterAck) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[a5]">HFQG_RecvStartCharge</a> from hfqgframe.o(i.HFQG_RecvStartCharge) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[a9]">HFQG_RecvStopCharge</a> from hfqgframe.o(i.HFQG_RecvStopCharge) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[a8]">HFQG_RecvStopChargeAck</a> from hfqgframe.o(i.HFQG_RecvStopChargeAck) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[9f]">HFQG_SendChargeGunA</a> from hfqgframe.o(i.HFQG_SendChargeGunA) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[a0]">HFQG_SendChargeGunB</a> from hfqgframe.o(i.HFQG_SendChargeGunB) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[9e]">HFQG_SendDevState</a> from hfqgframe.o(i.HFQG_SendDevState) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[9d]">HFQG_SendHear</a> from hfqgframe.o(i.HFQG_SendHear) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[9c]">HFQG_SendRegister</a> from hfqgframe.o(i.HFQG_SendRegister) referenced 2 times from hfqgframe.o(.data)
 <LI><a href="#[6]">HYDisplayMenu0</a> from dispkeyfunction.o(i.HYDisplayMenu0) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[8]">HYDisplayMenu1</a> from dispkeyfunction.o(i.HYDisplayMenu1) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[1a]">HYDisplayMenu10</a> from dispkeyfunction.o(i.HYDisplayMenu10) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[1c]">HYDisplayMenu11</a> from dispkeyfunction.o(i.HYDisplayMenu11) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[1e]">HYDisplayMenu12</a> from dispkeyfunction.o(i.HYDisplayMenu12) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[20]">HYDisplayMenu13</a> from dispkeyfunction.o(i.HYDisplayMenu13) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[22]">HYDisplayMenu14</a> from dispkeyfunction.o(i.HYDisplayMenu14) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[24]">HYDisplayMenu15</a> from dispkeyfunction.o(i.HYDisplayMenu15) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[26]">HYDisplayMenu16</a> from dispkeyfunction.o(i.HYDisplayMenu16) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[28]">HYDisplayMenu17</a> from dispkeyfunction.o(i.HYDisplayMenu17) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[2a]">HYDisplayMenu18</a> from dispkeyfunction.o(i.HYDisplayMenu18) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[2c]">HYDisplayMenu19</a> from dispkeyfunction.o(i.HYDisplayMenu19) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[a]">HYDisplayMenu2</a> from dispkeyfunction.o(i.HYDisplayMenu2) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[2e]">HYDisplayMenu20</a> from dispkeyfunction.o(i.HYDisplayMenu20) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[30]">HYDisplayMenu21</a> from dispkeyfunction.o(i.HYDisplayMenu21) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[32]">HYDisplayMenu22</a> from dispkeyfunction.o(i.HYDisplayMenu22) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[34]">HYDisplayMenu23</a> from dispkeyfunction.o(i.HYDisplayMenu23) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[36]">HYDisplayMenu24</a> from dispkeyfunction.o(i.HYDisplayMenu24) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[38]">HYDisplayMenu25</a> from dispkeyfunction.o(i.HYDisplayMenu25) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[3a]">HYDisplayMenu26</a> from dispkeyfunction.o(i.HYDisplayMenu26) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[3c]">HYDisplayMenu27</a> from dispkeyfunction.o(i.HYDisplayMenu27) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[3e]">HYDisplayMenu28</a> from dispkeyfunction.o(i.HYDisplayMenu28) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[40]">HYDisplayMenu29</a> from dispkeyfunction.o(i.HYDisplayMenu29) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[c]">HYDisplayMenu3</a> from dispkeyfunction.o(i.HYDisplayMenu3) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[42]">HYDisplayMenu30</a> from dispkeyfunction.o(i.HYDisplayMenu30) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[44]">HYDisplayMenu31</a> from dispkeyfunction.o(i.HYDisplayMenu31) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[46]">HYDisplayMenu32</a> from dispkeyfunction.o(i.HYDisplayMenu32) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[48]">HYDisplayMenu33</a> from dispkeyfunction.o(i.HYDisplayMenu33) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[4a]">HYDisplayMenu34</a> from dispkeyfunction.o(i.HYDisplayMenu34) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[4c]">HYDisplayMenu35</a> from dispkeyfunction.o(i.HYDisplayMenu35) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[4e]">HYDisplayMenu36</a> from dispkeyfunction.o(i.HYDisplayMenu36) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[50]">HYDisplayMenu37</a> from dispkeyfunction.o(i.HYDisplayMenu37) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[52]">HYDisplayMenu38</a> from dispkeyfunction.o(i.HYDisplayMenu38) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[54]">HYDisplayMenu39</a> from dispkeyfunction.o(i.HYDisplayMenu39) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[e]">HYDisplayMenu4</a> from dispkeyfunction.o(i.HYDisplayMenu4) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[56]">HYDisplayMenu40</a> from dispkeyfunction.o(i.HYDisplayMenu40) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[58]">HYDisplayMenu41</a> from dispkeyfunction.o(i.HYDisplayMenu41) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[5a]">HYDisplayMenu42</a> from dispkeyfunction.o(i.HYDisplayMenu42) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[5c]">HYDisplayMenu43</a> from dispkeyfunction.o(i.HYDisplayMenu43) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[5e]">HYDisplayMenu44</a> from dispkeyfunction.o(i.HYDisplayMenu44) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[60]">HYDisplayMenu45</a> from dispkeyfunction.o(i.HYDisplayMenu45) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[62]">HYDisplayMenu46</a> from dispkeyfunction.o(i.HYDisplayMenu46) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[64]">HYDisplayMenu47</a> from dispkeyfunction.o(i.HYDisplayMenu47) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[66]">HYDisplayMenu48</a> from dispkeyfunction.o(i.HYDisplayMenu48) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[68]">HYDisplayMenu49</a> from dispkeyfunction.o(i.HYDisplayMenu49) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[10]">HYDisplayMenu5</a> from dispkeyfunction.o(i.HYDisplayMenu5) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[6a]">HYDisplayMenu50</a> from dispkeyfunction.o(i.HYDisplayMenu50) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[6c]">HYDisplayMenu51</a> from dispkeyfunction.o(i.HYDisplayMenu51) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[6e]">HYDisplayMenu52</a> from dispkeyfunction.o(i.HYDisplayMenu52) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[70]">HYDisplayMenu53</a> from dispkeyfunction.o(i.HYDisplayMenu53) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[72]">HYDisplayMenu54</a> from dispkeyfunction.o(i.HYDisplayMenu54) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[74]">HYDisplayMenu55</a> from dispkeyfunction.o(i.HYDisplayMenu55) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[76]">HYDisplayMenu56</a> from dispkeyfunction.o(i.HYDisplayMenu56) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[78]">HYDisplayMenu57</a> from dispkeyfunction.o(i.HYDisplayMenu57) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[7a]">HYDisplayMenu58</a> from dispkeyfunction.o(i.HYDisplayMenu58) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[7c]">HYDisplayMenu59</a> from dispkeyfunction.o(i.HYDisplayMenu59) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[12]">HYDisplayMenu6</a> from dispkeyfunction.o(i.HYDisplayMenu6) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[7e]">HYDisplayMenu60</a> from dispkeyfunction.o(i.HYDisplayMenu60) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[80]">HYDisplayMenu61</a> from dispkeyfunction.o(i.HYDisplayMenu61) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[82]">HYDisplayMenu62</a> from dispkeyfunction.o(i.HYDisplayMenu62) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[84]">HYDisplayMenu63</a> from dispkeyfunction.o(i.HYDisplayMenu63) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[86]">HYDisplayMenu64</a> from dispkeyfunction.o(i.HYDisplayMenu64) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[88]">HYDisplayMenu65</a> from dispkeyfunction.o(i.HYDisplayMenu65) referenced 4 times from menudisp.o(.data)
 <LI><a href="#[14]">HYDisplayMenu7</a> from dispkeyfunction.o(i.HYDisplayMenu7) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[8b]">HYDisplayMenu73</a> from dispkeyfunction.o(i.HYDisplayMenu73) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[8d]">HYDisplayMenu74</a> from dispkeyfunction.o(i.HYDisplayMenu74) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[8f]">HYDisplayMenu75</a> from dispkeyfunction.o(i.HYDisplayMenu75) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[91]">HYDisplayMenu76</a> from dispkeyfunction.o(i.HYDisplayMenu76) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[93]">HYDisplayMenu77</a> from dispkeyfunction.o(i.HYDisplayMenu77) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[95]">HYDisplayMenu78</a> from dispkeyfunction.o(i.HYDisplayMenu78) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[97]">HYDisplayMenu79</a> from dispkeyfunction.o(i.HYDisplayMenu79) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[16]">HYDisplayMenu8</a> from dispkeyfunction.o(i.HYDisplayMenu8) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[99]">HYDisplayMenu80</a> from dispkeyfunction.o(i.HYDisplayMenu80) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[9b]">HYDisplayMenu81</a> from dispkeyfunction.o(i.HYDisplayMenu81) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[18]">HYDisplayMenu9</a> from dispkeyfunction.o(i.HYDisplayMenu9) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[5]">HYKeyEvent0</a> from dispkey.o(i.HYKeyEvent0) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[7]">HYKeyEvent1</a> from dispkey.o(i.HYKeyEvent1) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[19]">HYKeyEvent10</a> from dispkey.o(i.HYKeyEvent10) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[1b]">HYKeyEvent11</a> from dispkey.o(i.HYKeyEvent11) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[1d]">HYKeyEvent12</a> from dispkey.o(i.HYKeyEvent12) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[1f]">HYKeyEvent13</a> from dispkey.o(i.HYKeyEvent13) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[21]">HYKeyEvent14</a> from dispkey.o(i.HYKeyEvent14) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[23]">HYKeyEvent15</a> from dispkey.o(i.HYKeyEvent15) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[25]">HYKeyEvent16</a> from dispkey.o(i.HYKeyEvent16) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[27]">HYKeyEvent17</a> from dispkey.o(i.HYKeyEvent17) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[29]">HYKeyEvent18</a> from dispkey.o(i.HYKeyEvent18) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[2b]">HYKeyEvent19</a> from dispkey.o(i.HYKeyEvent19) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[9]">HYKeyEvent2</a> from dispkey.o(i.HYKeyEvent2) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[2d]">HYKeyEvent20</a> from dispkey.o(i.HYKeyEvent20) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[2f]">HYKeyEvent21</a> from dispkey.o(i.HYKeyEvent21) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[31]">HYKeyEvent22</a> from dispkey.o(i.HYKeyEvent22) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[33]">HYKeyEvent23</a> from dispkey.o(i.HYKeyEvent23) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[35]">HYKeyEvent24</a> from dispkey.o(i.HYKeyEvent24) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[37]">HYKeyEvent25</a> from dispkey.o(i.HYKeyEvent25) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[39]">HYKeyEvent26</a> from dispkey.o(i.HYKeyEvent26) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[3b]">HYKeyEvent27</a> from dispkey.o(i.HYKeyEvent27) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[3d]">HYKeyEvent28</a> from dispkey.o(i.HYKeyEvent28) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[3f]">HYKeyEvent29</a> from dispkey.o(i.HYKeyEvent29) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[b]">HYKeyEvent3</a> from dispkey.o(i.HYKeyEvent3) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[41]">HYKeyEvent30</a> from dispkey.o(i.HYKeyEvent30) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[43]">HYKeyEvent31</a> from dispkey.o(i.HYKeyEvent31) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[45]">HYKeyEvent32</a> from dispkey.o(i.HYKeyEvent32) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[47]">HYKeyEvent33</a> from dispkey.o(i.HYKeyEvent33) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[49]">HYKeyEvent34</a> from dispkey.o(i.HYKeyEvent34) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[4b]">HYKeyEvent35</a> from dispkey.o(i.HYKeyEvent35) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[4d]">HYKeyEvent36</a> from dispkey.o(i.HYKeyEvent36) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[4f]">HYKeyEvent37</a> from dispkey.o(i.HYKeyEvent37) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[51]">HYKeyEvent38</a> from dispkey.o(i.HYKeyEvent38) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[53]">HYKeyEvent39</a> from dispkey.o(i.HYKeyEvent39) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[d]">HYKeyEvent4</a> from dispkey.o(i.HYKeyEvent4) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[55]">HYKeyEvent40</a> from dispkey.o(i.HYKeyEvent40) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[57]">HYKeyEvent41</a> from dispkey.o(i.HYKeyEvent41) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[59]">HYKeyEvent42</a> from dispkey.o(i.HYKeyEvent42) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[5b]">HYKeyEvent43</a> from dispkey.o(i.HYKeyEvent43) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[5d]">HYKeyEvent44</a> from dispkey.o(i.HYKeyEvent44) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[5f]">HYKeyEvent45</a> from dispkey.o(i.HYKeyEvent45) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[61]">HYKeyEvent46</a> from dispkey.o(i.HYKeyEvent46) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[63]">HYKeyEvent47</a> from dispkey.o(i.HYKeyEvent47) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[65]">HYKeyEvent48</a> from dispkey.o(i.HYKeyEvent48) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[67]">HYKeyEvent49</a> from dispkey.o(i.HYKeyEvent49) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[f]">HYKeyEvent5</a> from dispkey.o(i.HYKeyEvent5) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[69]">HYKeyEvent50</a> from dispkey.o(i.HYKeyEvent50) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[6b]">HYKeyEvent51</a> from dispkey.o(i.HYKeyEvent51) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[6d]">HYKeyEvent52</a> from dispkey.o(i.HYKeyEvent52) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[6f]">HYKeyEvent53</a> from dispkey.o(i.HYKeyEvent53) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[71]">HYKeyEvent54</a> from dispkey.o(i.HYKeyEvent54) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[73]">HYKeyEvent55</a> from dispkey.o(i.HYKeyEvent55) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[75]">HYKeyEvent56</a> from dispkey.o(i.HYKeyEvent56) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[77]">HYKeyEvent57</a> from dispkey.o(i.HYKeyEvent57) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[79]">HYKeyEvent58</a> from dispkey.o(i.HYKeyEvent58) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[7b]">HYKeyEvent59</a> from dispkey.o(i.HYKeyEvent59) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[11]">HYKeyEvent6</a> from dispkey.o(i.HYKeyEvent6) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[7d]">HYKeyEvent60</a> from dispkey.o(i.HYKeyEvent60) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[7f]">HYKeyEvent61</a> from dispkey.o(i.HYKeyEvent61) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[81]">HYKeyEvent62</a> from dispkey.o(i.HYKeyEvent62) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[83]">HYKeyEvent63</a> from dispkey.o(i.HYKeyEvent63) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[85]">HYKeyEvent64</a> from dispkey.o(i.HYKeyEvent64) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[87]">HYKeyEvent65</a> from dispkey.o(i.HYKeyEvent65) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[89]">HYKeyEvent66</a> from dispkey.o(i.HYKeyEvent66) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[13]">HYKeyEvent7</a> from dispkey.o(i.HYKeyEvent7) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[8a]">HYKeyEvent73</a> from dispkey.o(i.HYKeyEvent73) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[8c]">HYKeyEvent74</a> from dispkey.o(i.HYKeyEvent74) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[8e]">HYKeyEvent75</a> from dispkey.o(i.HYKeyEvent75) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[90]">HYKeyEvent76</a> from dispkey.o(i.HYKeyEvent76) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[92]">HYKeyEvent77</a> from dispkey.o(i.HYKeyEvent77) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[94]">HYKeyEvent78</a> from dispkey.o(i.HYKeyEvent78) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[96]">HYKeyEvent79</a> from dispkey.o(i.HYKeyEvent79) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[15]">HYKeyEvent8</a> from dispkey.o(i.HYKeyEvent8) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[98]">HYKeyEvent80</a> from dispkey.o(i.HYKeyEvent80) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[9a]">HYKeyEvent81</a> from dispkey.o(i.HYKeyEvent81) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[17]">HYKeyEvent9</a> from dispkey.o(i.HYKeyEvent9) referenced 2 times from menudisp.o(.data)
 <LI><a href="#[ad]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[d5]">I2C1_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[d4]">I2C1_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[d7]">I2C2_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[d6]">I2C2_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[fe]">I2C3_ER_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[fd]">I2C3_EV_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[ae]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[128]">Munu3_16_CodeDispose</a> from displaymain.o(i.Munu3_16_CodeDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[129]">Munu3_CodeDispose</a> from displaymain.o(i.Munu3_CodeDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[143]">Munu48_PrcDispose</a> from displaymain.o(i.Munu48_PrcDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[12a]">Munu50_HANDADispose</a> from displaymain.o(i.Munu50_HANDADispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[12b]">Munu51_HANDBDispose</a> from displaymain.o(i.Munu51_HANDBDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[12c]">Munu52_DevnumDispose</a> from displaymain.o(i.Munu52_DevnumDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[12f]">Munu52_MacMaxVolDispose</a> from displaymain.o(i.Munu52_MacMaxVolDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[130]">Munu52_MacMinVolDispose</a> from displaymain.o(i.Munu52_MacMinVolDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[131]">Munu52_MaxOutCurDispose</a> from displaymain.o(i.Munu52_MaxOutCurDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[12e]">Munu52_ModuleNumDispose</a> from displaymain.o(i.Munu52_ModuleNumDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[134]">Munu52_OutDcCurDispose</a> from displaymain.o(i.Munu52_OutDcCurDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[133]">Munu52_OutDcVolDispose</a> from displaymain.o(i.Munu52_OutDcVolDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[12d]">Munu52_ProNumDispose</a> from displaymain.o(i.Munu52_ProNumDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[135]">Munu52_SOCDispose</a> from displaymain.o(i.Munu52_SOCDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[132]">Munu52_UseGunDispose</a> from displaymain.o(i.Munu52_UseGunDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[138]">Munu53_MeterAddADispose</a> from displaymain.o(i.Munu53_MeterAddADispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[139]">Munu53_MeterAddBDispose</a> from displaymain.o(i.Munu53_MeterAddBDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[137]">Munu53_acinputdownvalueDispose</a> from displaymain.o(i.Munu53_acinputdownvalueDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[136]">Munu53_acinputupvalueDispose</a> from displaymain.o(i.Munu53_acinputupvalueDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[13a]">Munu54_SetTimeDispose</a> from displaymain.o(i.Munu54_SetTimeDispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[13b]">Munu57_Just1Dispose</a> from displaymain.o(i.Munu57_Just1Dispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[13c]">Munu57_Just2Dispose</a> from displaymain.o(i.Munu57_Just2Dispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[13d]">Munu58_Just1Dispose</a> from displaymain.o(i.Munu58_Just1Dispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[13e]">Munu58_Just2Dispose</a> from displaymain.o(i.Munu58_Just2Dispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[13f]">Munu59_Just1Dispose</a> from displaymain.o(i.Munu59_Just1Dispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[140]">Munu59_Just2Dispose</a> from displaymain.o(i.Munu59_Just2Dispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[141]">Munu60_Just1Dispose</a> from displaymain.o(i.Munu60_Just1Dispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[142]">Munu60_Just2Dispose</a> from displaymain.o(i.Munu60_Just2Dispose) referenced from displaymain.o(.constdata)
 <LI><a href="#[ac]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[10a]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[10c]">OSTmr_Task</a> from ucos_ii.o(i.OSTmr_Task) referenced from ucos_ii.o(i.OSTmr_InitTask)
 <LI><a href="#[b3]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[b4]">OS_CPU_SysTickHandler</a> from stm32f4xx_it.o(i.OS_CPU_SysTickHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[10d]">OS_TaskIdle</a> from ucos_ii.o(i.OS_TaskIdle) referenced from ucos_ii.o(i.OS_InitTaskIdle)
 <LI><a href="#[10b]">OS_TaskReturn</a> from ucos_ii.o(i.OS_TaskReturn) referenced from os_cpu_c.o(i.OSTaskStkInit)
 <LI><a href="#[10e]">OS_TaskStat</a> from ucos_ii.o(i.OS_TaskStat) referenced from ucos_ii.o(i.OS_InitTaskStat)
 <LI><a href="#[f8]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[df]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[100]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[ff]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[102]">OTG_HS_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[101]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[b6]">PVD_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[159]">PowerSet_ControlGunA</a> from connectccu_main.o(i.PowerSet_ControlGunA) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[161]">PowerSet_ControlGunB</a> from connectccu_main.o(i.PowerSet_ControlGunB) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[16e]">ProtocolOperation_CCUYC</a> from connectccu_interface.o(i.ProtocolOperation_CCUYC) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[16f]">ProtocolOperation_CCUYX1</a> from connectccu_interface.o(i.ProtocolOperation_CCUYX1) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[170]">ProtocolOperation_CCUYX2</a> from connectccu_interface.o(i.ProtocolOperation_CCUYX2) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[172]">ProtocolOperation_Err</a> from connectccu_interface.o(i.ProtocolOperation_Err) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[171]">ProtocolOperation_Heart</a> from connectccu_interface.o(i.ProtocolOperation_Heart) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[16b]">ProtocolOperation_ReDZLockSet</a> from connectccu_interface.o(i.ProtocolOperation_ReDZLockSet) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[174]">ProtocolOperation_ReHandSet</a> from connectccu_interface.o(i.ProtocolOperation_ReHandSet) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[177]">ProtocolOperation_ReJust</a> from connectccu_interface.o(i.ProtocolOperation_ReJust) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[169]">ProtocolOperation_RePowerSet</a> from connectccu_interface.o(i.ProtocolOperation_RePowerSet) referenced 2 times from connectccu_main.o(.constdata)
 <LI><a href="#[16a]">ProtocolOperation_ReServiceSet</a> from connectccu_interface.o(i.ProtocolOperation_ReServiceSet) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[173]">ProtocolOperation_ReSysParaSet1</a> from connectccu_interface.o(i.ProtocolOperation_ReSysParaSet1) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[175]">ProtocolOperation_ReSysParaSet2</a> from connectccu_interface.o(i.ProtocolOperation_ReSysParaSet2) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[176]">ProtocolOperation_ReSysParaSet3</a> from connectccu_interface.o(i.ProtocolOperation_ReSysParaSet3) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[167]">ProtocolOperation_ReTimeSet</a> from connectccu_interface.o(i.ProtocolOperation_ReTimeSet) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[168]">ProtocolOperation_ReVersion</a> from connectccu_interface.o(i.ProtocolOperation_ReVersion) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[165]">ProtocolOperation_Restart</a> from connectccu_interface.o(i.ProtocolOperation_Restart) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[166]">ProtocolOperation_Restop</a> from connectccu_interface.o(i.ProtocolOperation_Restop) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[16c]">ProtocolOperation_StartOver</a> from connectccu_interface.o(i.ProtocolOperation_StartOver) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[16d]">ProtocolOperation_StopOver</a> from connectccu_interface.o(i.ProtocolOperation_StopOver) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[ba]">RCC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[127]">RS485_RD2Init</a> from bsp_rs485.o(i.RS485_RD2Init) referenced 2 times from bsp_rs485.o(.constdata)
 <LI><a href="#[de]">RTC_Alarm_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[b8]">RTC_WKUP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[17a]">Recv_AT_CGDCONT_Ack</a> from modulesim7600.o(i.Recv_AT_CGDCONT_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[179]">Recv_AT_CIMI_Ack</a> from modulesim7600.o(i.Recv_AT_CIMI_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[17b]">Recv_AT_CIPMODE_Ack</a> from modulesim7600.o(i.Recv_AT_CIPMODE_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[178]">Recv_AT_CSQ_Ack</a> from modulesim7600.o(i.Recv_AT_CSQ_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[17d]">Recv_AT_ConnectServer0Cmd_Ack</a> from modulesim7600.o(i.Recv_AT_ConnectServer0Cmd_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[17f]">Recv_AT_ConnectServer0_Ack</a> from modulesim7600.o(i.Recv_AT_ConnectServer0_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[17e]">Recv_AT_ConnectServer1Cmd_Ack</a> from modulesim7600.o(i.Recv_AT_ConnectServer1Cmd_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[180]">Recv_AT_ConnectServer1_Ack</a> from modulesim7600.o(i.Recv_AT_ConnectServer1_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[181]">Recv_AT_EnterATCmd_Ack</a> from modulesim7600.o(i.Recv_AT_EnterATCmd_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[17c]">Recv_AT_NETOPEN_Ack</a> from modulesim7600.o(i.Recv_AT_NETOPEN_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[184]">Recv_AT_ReRecv0Cmd_Ack</a> from modulesim7600.o(i.Recv_AT_ReRecv0Cmd_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[185]">Recv_AT_ReRecv1Cmd_Ack</a> from modulesim7600.o(i.Recv_AT_ReRecv1Cmd_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[182]">Recv_AT_SendAck0Cmd_Ack</a> from modulesim7600.o(i.Recv_AT_SendAck0Cmd_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[183]">Recv_AT_SendAck1Cmd_Ack</a> from modulesim7600.o(i.Recv_AT_SendAck1Cmd_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[186]">Recv_AT_SetReAct_Ack</a> from modulesim7600.o(i.Recv_AT_SetReAct_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[187]">Recv_ActRecv0_Ack</a> from modulesim7600.o(i.Recv_ActRecv0_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[188]">Recv_ActRecv1_Ack</a> from modulesim7600.o(i.Recv_ActRecv1_Ack) referenced from modulesim7600.o(.constdata)
 <LI><a href="#[ab]">Reset_Handler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[e6]">SDIO_IRQHandler</a> from bsp_sdio_sd.o(i.SDIO_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[d8]">SPI1_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[d9]">SPI2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[e8]">SPI3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[b1]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[15a]">ServiceSet_ControlGunA</a> from connectccu_main.o(i.ServiceSet_ControlGunA) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[162]">ServiceSet_ControlGunB</a> from connectccu_main.o(i.ServiceSet_ControlGunB) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[15b]">SysHandSet_ControlGunA</a> from connectccu_main.o(i.SysHandSet_ControlGunA) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[163]">SysHandSet_ControlGunB</a> from connectccu_main.o(i.SysHandSet_ControlGunB) referenced from connectccu_main.o(.constdata)
 <LI><a href="#[108]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[b7]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[154]">TCU_Data_TimeOut</a> from connectccu_main.o(i.TCU_Data_TimeOut) referenced 34 times from connectccu_main.o(.constdata)
 <LI><a href="#[cd]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[d0]">TIM1_CC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[cf]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[ce]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[d1]">TIM2_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[d2]">TIM3_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[d3]">TIM4_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[e7]">TIM5_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[eb]">TIM6_DAC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[ec]">TIM7_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[e0]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[e3]">TIM8_CC_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[e2]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[e1]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[11b]">Task4GMain</a> from 4gmain.o(i.Task4GMain) referenced from main.o(i.init_task_core)
 <LI><a href="#[11d]">Task4GRecv</a> from 4grecv.o(i.Task4GRecv) referenced from main.o(i.init_task_core)
 <LI><a href="#[11c]">Task4GSend</a> from 4gsend.o(i.Task4GSend) referenced from main.o(i.init_task_core)
 <LI><a href="#[11a]">TaskCardStk</a> from card_cpu.o(i.TaskCardStk) referenced from main.o(i.init_task_core)
 <LI><a href="#[117]">TaskCntCCUMain</a> from connectccu_main.o(i.TaskCntCCUMain) referenced from main.o(i.init_task_core)
 <LI><a href="#[116]">TaskDisplay</a> from displaymain.o(i.TaskDisplay) referenced from main.o(i.init_task_core)
 <LI><a href="#[114]">TaskLED</a> from main.o(i.TaskLED) referenced from main.o(i.init_task_core)
 <LI><a href="#[118]">TaskMeterStk</a> from rs485meter.o(i.TaskMeterStk) referenced from main.o(i.init_task_core)
 <LI><a href="#[115]">TaskPeriod</a> from displaymain.o(i.TaskPeriod) referenced from main.o(i.init_task_core)
 <LI><a href="#[110]">TaskRMsgDisposeGunA</a> from connectccu_main.o(i.TaskRMsgDisposeGunA) referenced from connectccu_main.o(i.TaskCntCCUMain)
 <LI><a href="#[111]">TaskRMsgDisposeGunB</a> from connectccu_main.o(i.TaskRMsgDisposeGunB) referenced from connectccu_main.o(i.TaskCntCCUMain)
 <LI><a href="#[119]">TaskRTC</a> from rtc_task.o(i.TaskRTC) referenced from main.o(i.init_task_core)
 <LI><a href="#[10f]">TaskSendTCUFrame</a> from connectccu_main.o(i.TaskSendTCUFrame) referenced from connectccu_main.o(i.TaskCntCCUMain)
 <LI><a href="#[11f]">UART1_PIN_CFG</a> from bsp_uart.o(i.UART1_PIN_CFG) referenced from bsp_uart.o(.constdata)
 <LI><a href="#[120]">UART2_PIN_CFG</a> from bsp_uart.o(i.UART2_PIN_CFG) referenced from bsp_uart.o(.constdata)
 <LI><a href="#[121]">UART3_PIN_CFG</a> from bsp_uart.o(i.UART3_PIN_CFG) referenced from bsp_uart.o(.constdata)
 <LI><a href="#[e9]">UART4_IRQHandler</a> from stm32f4xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[122]">UART4_PIN_CFG</a> from bsp_uart.o(i.UART4_PIN_CFG) referenced from bsp_uart.o(.constdata)
 <LI><a href="#[ea]">UART5_IRQHandler</a> from stm32f4xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[123]">UART5_PIN_CFG</a> from bsp_uart.o(i.UART5_PIN_CFG) referenced from bsp_uart.o(.constdata)
 <LI><a href="#[124]">UART6_PIN_CFG</a> from bsp_uart.o(i.UART6_PIN_CFG) referenced from bsp_uart.o(.constdata)
 <LI><a href="#[125]">UART7_PIN_CFG</a> from bsp_uart.o(i.UART7_PIN_CFG) referenced from bsp_uart.o(.constdata)
 <LI><a href="#[126]">UART8_PIN_CFG</a> from bsp_uart.o(i.UART8_PIN_CFG) referenced from bsp_uart.o(.constdata)
 <LI><a href="#[da]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[db]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[dc]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[fc]">USART6_IRQHandler</a> from stm32f4xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[1]">USBH_Connected</a> from usbh_core.o(i.USBH_Connected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[2]">USBH_Disconnected</a> from usbh_core.o(i.USBH_Disconnected) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[4]">USBH_PortDisabled</a> from usbh_core.o(i.USBH_PortDisabled) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[3]">USBH_PortEnabled</a> from usbh_core.o(i.USBH_PortEnabled) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[0]">USBH_SOF</a> from usbh_core.o(i.USBH_SOF) referenced 2 times from usbh_core.o(.data)
 <LI><a href="#[b0]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[b5]">WWDG_IRQHandler</a> from startup_stm32f429_439xx.o(.text) referenced from startup_stm32f429_439xx.o(RESET)
 <LI><a href="#[109]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f429_439xx.o(.text)
 <LI><a href="#[113]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[112]">fputc</a> from bsp_debug_usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[11e]">init_task_core</a> from main.o(i.init_task_core) referenced from main.o(i.main)
 <LI><a href="#[107]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[109]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(.text)
</UL>
<P><STRONG><a name="[377]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[189]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[19f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[378]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[379]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[37a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[37b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[37c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[ab]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[f7]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[103]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429_439xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1e8]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveMsgHook
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MsgDeal
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PushOneByte
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PopOneByte
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[1ea]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveMsgHook
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MsgDeal
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PushOneByte
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PopOneByte
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[2d2]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[2f4]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[2c1]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[b3]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[18b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[37d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_AutoWritePage
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MsgDeal
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecode_Dispose
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvConectCCUAnalyze
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardMsg
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReciveCCUFrame
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_StopOver
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_StartOver
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_CCUYC
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardAnalysis
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WriterBlock
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculationRate
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCcuYC
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCcuStopOver
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCcuStartOver
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_RecvStartCharge
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQGFreamSend
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendBill
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_RecvFrameDispose
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
</UL>

<P><STRONG><a name="[1dd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CANRx_IRQHandler
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFormation
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
</UL>

<P><STRONG><a name="[37e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[37f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ParaInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvConectCCUAnalyze
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBillingInit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingInit
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
</UL>

<P><STRONG><a name="[223]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ParaInit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConnectCCUCAN
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardAnalysis
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_HardwareInit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485MetterInit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingInit
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HardwareInit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRecv_HardwareInit
</UL>

<P><STRONG><a name="[381]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[315]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck1Cmd_Ack
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck0Cmd_Ack
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CSQ_Ack
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIMI_Ack
</UL>

<P><STRONG><a name="[2a3]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600_RecvDesposeCmd
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPSEND
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
</UL>

<P><STRONG><a name="[322]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_AutoWritePage
</UL>

<P><STRONG><a name="[228]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardNum_Judge
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600_RecvDesposeCmd
</UL>

<P><STRONG><a name="[316]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
</UL>

<P><STRONG><a name="[191]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CSQ_Ack
</UL>

<P><STRONG><a name="[382]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[383]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[384]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19a]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[36b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[385]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[386]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[195]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[199]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[198]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a0]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[387]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>ADJust_ControlGunA</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, connectccu_main.o(i.ADJust_ControlGunA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ADJust_ControlGunA &rArr; GDW_JustFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_JustFrame
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>ADJust_ControlGunB</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, connectccu_main.o(i.ADJust_ControlGunB))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ADJust_ControlGunB &rArr; GDW_JustFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_JustFrame
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>APP_ChargeRecodeFlashOperation</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, flashdatadeal.o(i.APP_ChargeRecodeFlashOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WriteBuffer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RWChargeRecode
</UL>

<P><STRONG><a name="[1cf]"></a>APP_ClearRecodeInfo</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, displaymain.o(i.APP_ClearRecodeInfo))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent81
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent79
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent78
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent77
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent76
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent75
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent74
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent73
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent7
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent3
</UL>

<P><STRONG><a name="[1a5]"></a>APP_DisplayRecvDataAnalyze</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, displaymain.o(i.APP_DisplayRecvDataAnalyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = APP_DisplayRecvDataAnalyze &rArr; DealWithVari
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithKey
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithVari
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
</UL>

<P><STRONG><a name="[1a9]"></a>APP_FlashOperation</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, flashdatadeal.o(i.APP_FlashOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchParaManagementTable
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolFlashOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent53
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu53_acinputupvalueDispose
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu53_acinputdownvalueDispose
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu53_MeterAddBDispose
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu53_MeterAddADispose
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_UseGunDispose
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_SOCDispose
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_ProNumDispose
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_OutDcVolDispose
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_OutDcCurDispose
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_ModuleNumDispose
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_MaxOutCurDispose
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_MacMinVolDispose
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_MacMaxVolDispose
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_DevnumDispose
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu48_PrcDispose
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ParaInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecode_Dispose
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_RecvStartCharge
</UL>

<P><STRONG><a name="[1c6]"></a>APP_Get4GMainEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 4gmain.o(i.APP_Get4GMainEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvConectCCUAnalyze
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_RecvStopCharge
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_RecvStartCharge
</UL>

<P><STRONG><a name="[1b3]"></a>APP_GetAppRegisterState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modulesim7600.o(i.APP_GetAppRegisterState))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetNetState
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendRegister
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendHear
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendDevState
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendChargeGunB
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendChargeGunA
</UL>

<P><STRONG><a name="[234]"></a>APP_GetBatchNum</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, hfqgframe.o(i.APP_GetBatchNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_GetBatchNum
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecode_Dispose
</UL>

<P><STRONG><a name="[263]"></a>APP_GetCSQNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modulesim7600.o(i.APP_GetCSQNum))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_CSQState
</UL>

<P><STRONG><a name="[290]"></a>APP_GetCarInfo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, displaymain.o(i.APP_GetCarInfo))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu38
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu39
</UL>

<P><STRONG><a name="[333]"></a>APP_GetCardEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, card_cpu.o(i.APP_GetCardEvent))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardMsg
</UL>

<P><STRONG><a name="[2f8]"></a>APP_GetCcuComState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, connectccu_main.o(i.APP_GetCcuComState))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_GerDivStatus
</UL>

<P><STRONG><a name="[1ac]"></a>APP_GetCcuStartOver</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, connectccu_interface.o(i.APP_GetCcuStartOver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APP_GetCcuStartOver
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvConectCCUAnalyze
</UL>

<P><STRONG><a name="[1ae]"></a>APP_GetCcuStopOver</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, connectccu_interface.o(i.APP_GetCcuStopOver))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APP_GetCcuStopOver
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvConectCCUAnalyze
</UL>

<P><STRONG><a name="[1af]"></a>APP_GetCcuYC</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, connectccu_interface.o(i.APP_GetCcuYC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = APP_GetCcuYC
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetYxYcData
</UL>

<P><STRONG><a name="[1b5]"></a>APP_GetCcuYX1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, connectccu_interface.o(i.APP_GetCcuYX1))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetYxYcData
</UL>

<P><STRONG><a name="[1b6]"></a>APP_GetCcuYX2</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, connectccu_interface.o(i.APP_GetCcuYX2))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetYxYcData
</UL>

<P><STRONG><a name="[28e]"></a>APP_GetChargeRecodeInfo</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, displaymain.o(i.APP_GetChargeRecodeInfo))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu32
</UL>

<P><STRONG><a name="[28f]"></a>APP_GetChargeingInfo</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, displaymain.o(i.APP_GetChargeingInfo))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu37
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu51
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu50
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu36
</UL>

<P><STRONG><a name="[337]"></a>APP_GetConnectccuGunAEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, connectccu_main.o(i.APP_GetConnectccuGunAEvent))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunA
</UL>

<P><STRONG><a name="[338]"></a>APP_GetConnectccuGunBEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, connectccu_main.o(i.APP_GetConnectccuGunBEvent))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunB
</UL>

<P><STRONG><a name="[280]"></a>APP_GetDevNum</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, displaymain.o(i.APP_GetDevNum))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQGFreamSend
</UL>

<P><STRONG><a name="[288]"></a>APP_GetDispControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, displaymain.o(i.APP_GetDispControl))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent81
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent79
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent78
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent77
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent76
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent75
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent74
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent73
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent59
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent58
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent57
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent56
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent41
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent40
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent39
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent38
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent37
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent36
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent33
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent32
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent3
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu33
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu32
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu22
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendDevState
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendChargeGunB
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendChargeGunA
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendStartAck
</UL>

<P><STRONG><a name="[1a1]"></a>APP_GetDispEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, displaymain.o(i.APP_GetDispEvent))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecUnLocked_ControlGunB
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecUnLocked_ControlGunA
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecLocked_ControlGunB
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecLocked_ControlGunA
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStop_ControlGunB
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStop_ControlGunA
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStart_ControlGunB
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStart_ControlGunA
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADJust_ControlGunB
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADJust_ControlGunA
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_StopOver
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMsg_Send
</UL>

<P><STRONG><a name="[29c]"></a>APP_GetDispUartStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, displaymain.o(i.APP_GetDispUartStatus))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
</UL>

<P><STRONG><a name="[267]"></a>APP_GetErrState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, displaymain.o(i.APP_GetErrState))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent3
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_State
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendDevState
</UL>

<P><STRONG><a name="[268]"></a>APP_GetGunState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, displaymain.o(i.APP_GetGunState))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent3
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_State
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendDevState
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendStartAck
</UL>

<P><STRONG><a name="[1b0]"></a>APP_GetMeterAddr</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, displaymain.o(i.APP_GetMeterAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = APP_GetMeterAddr &rArr; ByteHexToBcd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteHexToBcd
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMeterStk
</UL>

<P><STRONG><a name="[287]"></a>APP_GetMeterPowerInfo</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rs485meter.o(i.APP_GetMeterPowerInfo))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendDevState
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendChargeGunB
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendChargeGunA
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendBill
</UL>

<P><STRONG><a name="[24c]"></a>APP_GetModuleConnectState</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modulesim7600.o(i.APP_GetModuleConnectState))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>

<P><STRONG><a name="[233]"></a>APP_GetNetMoney</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hfqgframe.o(i.APP_GetNetMoney))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecode_Dispose
</UL>

<P><STRONG><a name="[1b2]"></a>APP_GetNetState</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, 4gmain.o(i.APP_GetNetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = APP_GetNetState
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_NetState
</UL>

<P><STRONG><a name="[336]"></a>APP_GetPricEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, charging_interface.o(i.APP_GetPricEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPricMsg
</UL>

<P><STRONG><a name="[220]"></a>APP_GetPriceInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, displaymain.o(i.APP_GetPriceInfo))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculationRate
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_RecvStartCharge
</UL>

<P><STRONG><a name="[27a]"></a>APP_GetRecodeCurNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, displaymain.o(i.APP_GetRecodeCurNum))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent81
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent79
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent78
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent77
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent76
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent75
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent74
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent73
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent3
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispose_LocalUnLock
</UL>

<P><STRONG><a name="[33e]"></a>APP_GetResendBillState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hfqgframe.o(i.APP_GetResendBillState))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[249]"></a>APP_GetSIM7600Status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modulesim7600.o(i.APP_GetSIM7600Status))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>

<P><STRONG><a name="[285]"></a>APP_GetSendTaskEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, 4gsend.o(i.APP_GetSendTaskEvent))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_RecvStopChargeAck
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_RecvStopCharge
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_RecvStartCharge
</UL>

<P><STRONG><a name="[265]"></a>APP_GetWorkState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, displaymain.o(i.APP_GetWorkState))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu51_HANDBDispose
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu50_HANDADispose
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispose_SOCThreshold
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_ChargeingDate
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_CardDate
</UL>

<P><STRONG><a name="[1b7]"></a>APP_RWChargeRecode</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, displaymain.o(i.APP_RWChargeRecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ChargeRecodeFlashOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecode_Dispose
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispose_LocalUnLock
</UL>

<P><STRONG><a name="[317]"></a>APP_RecvDataControl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, 4grecv.o(i.APP_RecvDataControl))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv1Cmd_Ack
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ReRecv0Cmd_Ack
</UL>

<P><STRONG><a name="[1ca]"></a>APP_SelectCurChargeRecode</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, displaymain.o(i.APP_SelectCurChargeRecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = APP_SelectCurChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RWChargeRecode
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent81
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent79
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent78
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent77
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent76
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent75
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent74
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent73
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent3
</UL>

<P><STRONG><a name="[1cd]"></a>APP_SelectNextNChargeRecode</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, displaymain.o(i.APP_SelectNextNChargeRecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = APP_SelectNextNChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RWChargeRecode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent8
</UL>

<P><STRONG><a name="[1ce]"></a>APP_SelectUpNChargeRecode</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, displaymain.o(i.APP_SelectUpNChargeRecode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = APP_SelectUpNChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NetPageDispos
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RWChargeRecode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent9
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent8
</UL>

<P><STRONG><a name="[284]"></a>APP_SetAppRegisterState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modulesim7600.o(i.APP_SetAppRegisterState))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_RecvRegisterAck
</UL>

<P><STRONG><a name="[1d1]"></a>APP_SetCountDownTime</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, displaymain.o(i.APP_SetCountDownTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = APP_SetCountDownTime &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>

<P><STRONG><a name="[1d4]"></a>APP_SetDispUartStatus</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, displaymain.o(i.APP_SetDispUartStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = APP_SetDispUartStatus &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTime
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraPerprintBackImage
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
</UL>

<P><STRONG><a name="[33b]"></a>APP_SetNetNotConect</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, modulesim7600.o(i.APP_SetNetNotConect))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
</UL>

<P><STRONG><a name="[274]"></a>APP_SetPara1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, connectccu_interface.o(i.APP_SetPara1))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_MaxOutCurDispose
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_MacMinVolDispose
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_MacMaxVolDispose
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ParaInit
</UL>

<P><STRONG><a name="[275]"></a>APP_SetPara2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, connectccu_interface.o(i.APP_SetPara2))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_OutDcVolDispose
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_OutDcCurDispose
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_ModuleNumDispose
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ParaInit
</UL>

<P><STRONG><a name="[276]"></a>APP_SetPara3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, connectccu_interface.o(i.APP_SetPara3))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu53_acinputupvalueDispose
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu53_acinputdownvalueDispose
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ParaInit
</UL>

<P><STRONG><a name="[294]"></a>APP_SetRecodeCurNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, displaymain.o(i.APP_SetRecodeCurNum))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent53
</UL>

<P><STRONG><a name="[33d]"></a>APP_SetResendBillState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hfqgframe.o(i.APP_SetResendBillState))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[2d5]"></a>App_TCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[2db]"></a>App_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[2e0]"></a>App_TaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskDelHook))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
</UL>

<P><STRONG><a name="[2e2]"></a>App_TaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[2e4]"></a>App_TaskReturnHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskReturnHook))
<BR><BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
</UL>

<P><STRONG><a name="[2e6]"></a>App_TaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[2e8]"></a>App_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app_hooks.o(i.App_TaskSwHook))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[1d5]"></a>App_TimeTickHook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, app_hooks.o(i.App_TimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = App_TimeTickHook &rArr; UART_ReceiveMsgHook &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MPLSScan
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveMsgHook
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCU_Data_Timing_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[1fb]"></a>BCDtoHEX</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, dwinprotocol.o(i.BCDtoHEX))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCSetTime
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_EndChargeDate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendChargeGunB
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendChargeGunA
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendBill
</UL>

<P><STRONG><a name="[1d9]"></a>BSP_CANRx_IRQHandler</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, bsp_can.o(i.BSP_CANRx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = BSP_CANRx_IRQHandler &rArr; BSP_CanDataProcess &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CanDataProcess
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[1df]"></a>BSP_CANTx_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, bsp_can.o(i.BSP_CANTx_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_CANTx_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
</UL>

<P><STRONG><a name="[1e0]"></a>BSP_CAN_GPIOInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, bsp_can.o(i.BSP_CAN_GPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_CAN_GPIOInit &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Init
</UL>

<P><STRONG><a name="[1e4]"></a>BSP_CAN_Init</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, bsp_can.o(i.BSP_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BSP_CAN_Init &rArr; CAN_Configuration &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_GPIOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConnectCCUCAN
</UL>

<P><STRONG><a name="[1e7]"></a>BSP_CAN_Write</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bsp_can.o(i.BSP_CAN_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_StopFrame
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_StartFrame
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDVersionFrame
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDTimeSetFrame
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDServiceFrame
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDSYSConfig3Frame
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDSYSConfig2Frame
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDSYSConfig1Frame
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDHandStartFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDDZLockFrame
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_ReStopOverFrame
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_ReStartOverFrame
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_PowerConfigFrame
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_JustFrame
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_HeartFrame
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_ErrFrame
</UL>

<P><STRONG><a name="[1de]"></a>BSP_CanDataProcess</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, bsp_can.o(i.BSP_CanDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = BSP_CanDataProcess &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFormation
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetRxBuffPosotion
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CANRx_IRQHandler
</UL>

<P><STRONG><a name="[1eb]"></a>BSP_GetRxBuffPosotion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_can.o(i.BSP_GetRxBuffPosotion))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CanDataProcess
</UL>

<P><STRONG><a name="[1ee]"></a>BSP_IOClose</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_io.o(i.BSP_IOClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IOClose
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IOInit
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
</UL>

<P><STRONG><a name="[1f0]"></a>BSP_IOInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp_io.o(i.BSP_IOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_IOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IOClose
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task_core
</UL>

<P><STRONG><a name="[1f2]"></a>BSP_IOOpen</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp_io.o(i.BSP_IOOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_IOOpen
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
</UL>

<P><STRONG><a name="[1f3]"></a>BSP_LEDInit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsp_led.o(i.BSP_LEDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BSP_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLED
</UL>

<P><STRONG><a name="[1f4]"></a>BSP_LEDWrite</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, bsp_led.o(i.BSP_LEDWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LEDWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLED
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StartCard
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Query_Card
</UL>

<P><STRONG><a name="[1d7]"></a>BSP_MPLSScan</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, bsp_mpulse.o(i.BSP_MPLSScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MPLSScan
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>

<P><STRONG><a name="[1f6]"></a>BSP_RTCGetTime</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, bsp_rtc.o(i.BSP_RTCGetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_RTCGetTime &rArr; RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoBCD
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRTC
</UL>

<P><STRONG><a name="[1fa]"></a>BSP_RTCSetTime</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bsp_rtc.o(i.BSP_RTCSetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = BSP_RTCSetTime &rArr; RTC_TimeAndDate_Set &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoHEX
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeAndDate_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRTC
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu54_SetTimeDispose
</UL>

<P><STRONG><a name="[1fd]"></a>BSP_UARTConfigInit</STRONG> (Thumb, 776 bytes, Stack size 48 bytes, bsp_uart.o(i.BSP_UARTConfigInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = BSP_UARTConfigInit &rArr; BSP_UARTTxDMAConfigInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTTxDMAConfigInit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommHandle
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComPort
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_HardwareInit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485MetterInit
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HardwareInit
</UL>

<P><STRONG><a name="[209]"></a>BSP_UARTConfigTimeInit</STRONG> (Thumb, 776 bytes, Stack size 48 bytes, bsp_uart.o(i.BSP_UARTConfigTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = BSP_UARTConfigTimeInit &rArr; BSP_UARTTxDMAConfigInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTTxDMAConfigInit
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCommHandle
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComPort
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemCreate
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRecv_HardwareInit
</UL>

<P><STRONG><a name="[376]"></a>BSP_UARTInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, bsp_uart.o(i.BSP_UARTInit))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task_core
</UL>

<P><STRONG><a name="[203]"></a>BSP_UARTTxDMAConfigInit</STRONG> (Thumb, 310 bytes, Stack size 72 bytes, bsp_uart.o(i.BSP_UARTTxDMAConfigInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_UARTTxDMAConfigInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
</UL>

<P><STRONG><a name="[20b]"></a>BSP_UARTWrite</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, bsp_uart.o(i.BSP_UARTWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_RDCmd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxMode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PushBytes
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComPort
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WriterBlock
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SetValue
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReadBlock
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AuthKey
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ActiveCard
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchMeterData
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>

<P><STRONG><a name="[af]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[21f]"></a>ByteBcdToHex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dealwithchar.o(i.ByteBcdToHex))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRTC
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourByteBcdToHex
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTime
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculationRate
</UL>

<P><STRONG><a name="[1b1]"></a>ByteHexToBcd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dealwithchar.o(i.ByteHexToBcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ByteHexToBcd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetMeterAddr
</UL>

<P><STRONG><a name="[c9]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; BSP_CANRx_IRQHandler &rArr; BSP_CanDataProcess &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CANRx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = CAN1_TX_IRQHandler &rArr; BSP_CANTx_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CANTx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; BSP_CANRx_IRQHandler &rArr; BSP_CanDataProcess &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CANRx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[f4]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.CAN2_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = CAN2_TX_IRQHandler &rArr; BSP_CANTx_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CANTx_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[1db]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CANTx_IRQHandler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CANRx_IRQHandler
</UL>

<P><STRONG><a name="[1e5]"></a>CAN_Configuration</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, bsp_can.o(i.CAN_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CAN_Configuration &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Init
</UL>

<P><STRONG><a name="[213]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[215]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[1da]"></a>CAN_GetITStatus</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, stm32f4xx_can.o(i.CAN_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CANTx_IRQHandler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CANRx_IRQHandler
</UL>

<P><STRONG><a name="[1e6]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Init
</UL>

<P><STRONG><a name="[214]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f4xx_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Configuration
</UL>

<P><STRONG><a name="[1dc]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CANRx_IRQHandler
</UL>

<P><STRONG><a name="[1e9]"></a>CAN_Transmit</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>

<P><STRONG><a name="[2fa]"></a>CCU_ReFrame_StateSet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, connectccu_main.o(i.CCU_ReFrame_StateSet))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_StopOver
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_StartOver
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_Restop
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_Restart
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_ReVersion
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_ReTimeSet
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_ReSysParaSet3
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_ReSysParaSet2
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_ReSysParaSet1
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_ReServiceSet
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_RePowerSet
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_ReJust
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_ReHandSet
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_ReDZLockSet
</UL>

<P><STRONG><a name="[339]"></a>CalcBCC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, card_cpu.o(i.CalcBCC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CalcBCC
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCardmessage
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WriterBlock
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SetValue
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReadBlock
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AuthKey
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ActiveCard
</UL>

<P><STRONG><a name="[218]"></a>CalculationBill</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, rs485meter.o(i.CalculationBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CalculationBill
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingStatus
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPowerChangeFlag
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPowerChangeFlag
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurRate
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurUnixTimestamp
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGunCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMeterStk
</UL>

<P><STRONG><a name="[21e]"></a>CalculationRate</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, rs485meter.o(i.CalculationRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CalculationRate
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteBcdToHex
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurTime
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetPriceInfo
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMeterStk
</UL>

<P><STRONG><a name="[221]"></a>CardAnalysis</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, card_cpu.o(i.CardAnalysis))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = CardAnalysis &rArr; Charge_StartCard &rArr; Dispose_LocalUnLock &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCardWorkStatus
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StartCard
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Query_Card
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCardInfoStatus
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCardStk
</UL>

<P><STRONG><a name="[229]"></a>CardUart_MsgFree</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, card_cpu.o(i.CardUart_MsgFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = CardUart_MsgFree &rArr; UART_MsgDeal
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MsgDeal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FreeOneMsg
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispose_LocalUnLock
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StartCard
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Query_Card
</UL>

<P><STRONG><a name="[22d]"></a>Card_FrameRx_Timeout</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, waittimeout.o(i.Card_FrameRx_Timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Card_FrameRx_Timeout &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispose_LocalUnLock
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StartCard
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Query_Card
</UL>

<P><STRONG><a name="[231]"></a>Card_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, card_cpu.o(i.Card_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Card_Init &rArr; OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCardStk
</UL>

<P><STRONG><a name="[343]"></a>Change2Unixstamp</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, rtc_task.o(i.Change2Unixstamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Change2Unixstamp
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRTC
</UL>

<P><STRONG><a name="[157]"></a>ChargeStart_ControlGunA</STRONG> (Thumb, 600 bytes, Stack size 24 bytes, connectccu_main.o(i.ChargeStart_ControlGunA))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ChargeStart_ControlGunA &rArr; WaitRecvCCUGunA &rArr; ReciveCCUFrame &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCU_FrameRx_GUNATimeout
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRecvCCUGunA
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>ChargeStart_ControlGunB</STRONG> (Thumb, 600 bytes, Stack size 24 bytes, connectccu_main.o(i.ChargeStart_ControlGunB))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ChargeStart_ControlGunB &rArr; WaitRecvCCUGunB &rArr; ReciveCCUFrame &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCU_FrameRx_GUNBTimeout
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRecvCCUGunB
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>ChargeStop_ControlGunA</STRONG> (Thumb, 574 bytes, Stack size 24 bytes, connectccu_main.o(i.ChargeStop_ControlGunA))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ChargeStop_ControlGunA &rArr; WaitRecvCCUGunA &rArr; ReciveCCUFrame &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCU_FrameRx_GUNATimeout
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRecvCCUGunA
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>ChargeStop_ControlGunB</STRONG> (Thumb, 574 bytes, Stack size 24 bytes, connectccu_main.o(i.ChargeStop_ControlGunB))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ChargeStop_ControlGunB &rArr; WaitRecvCCUGunB &rArr; ReciveCCUFrame &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCU_FrameRx_GUNBTimeout
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRecvCCUGunB
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[244]"></a>ChargingAnalyse</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rs485meter.o(i.ChargingAnalyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ChargingAnalyse &rArr; StartBillingInit
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBillingInit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargingStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMeterStk
</UL>

<P><STRONG><a name="[247]"></a>ChargingInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, rs485meter.o(i.ChargingInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = ChargingInit &rArr; OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMeterStk
</UL>

<P><STRONG><a name="[29e]"></a>CompareAddr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rs485meter.o(i.CompareAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompareAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataAnalyse
</UL>

<P><STRONG><a name="[f0]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; SD_ProcessDMAIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[31a]"></a>DMA_ClearFlag</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessDMAIRQ
</UL>

<P><STRONG><a name="[201]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
</UL>

<P><STRONG><a name="[202]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(i.DMA_GetCmdStatus))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
</UL>

<P><STRONG><a name="[20a]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTTxDMAConfigInit
</UL>

<P><STRONG><a name="[1a7]"></a>DealWithKey</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dispkey.o(i.DealWithKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DealWithKey
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DisplayRecvDataAnalyze
</UL>

<P><STRONG><a name="[b2]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[251]"></a>Debug_USART_Config</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, bsp_debug_usart.o(i.Debug_USART_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Debug_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task_core
</UL>

<P><STRONG><a name="[2eb]"></a>DelayInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, delay.o(i.DelayInit))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTick_Init
</UL>

<P><STRONG><a name="[253]"></a>Dis_ShowCopy</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dispshowstatus.o(i.Dis_ShowCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Dis_ShowCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
</UL>

<P><STRONG><a name="[254]"></a>Dis_ShowDivStatus</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, dispshowstatus.o(i.Dis_ShowDivStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Dis_ShowDivStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_StatusDivInfo
</UL>

<P><STRONG><a name="[257]"></a>Dis_ShowErr</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, dispshowstatus.o(i.Dis_ShowErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Dis_ShowErr &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_State
</UL>

<P><STRONG><a name="[1c3]"></a>Dis_ShowStatus</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, dispshowstatus.o(i.Dis_ShowStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu37
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent47
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent46
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu48_PrcDispose
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardDispose
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu36
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_EndChargeDate
</UL>

<P><STRONG><a name="[258]"></a>Dis_ShowTime</STRONG> (Thumb, 106 bytes, Stack size 168 bytes, dispshowstatus.o(i.Dis_ShowTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Dis_ShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShowRTC
</UL>

<P><STRONG><a name="[1bf]"></a>DispShow_EndChargeDate</STRONG> (Thumb, 1002 bytes, Stack size 8 bytes, displaymain.o(i.DispShow_EndChargeDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = DispShow_EndChargeDate &rArr; Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoHEX
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardDispose
</UL>

<P><STRONG><a name="[269]"></a>DispShow_StatusDivInfo</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, displaymain.o(i.DispShow_StatusDivInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = DispShow_StatusDivInfo &rArr; Dis_ShowDivStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowDivStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu44
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu43
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu42
</UL>

<P><STRONG><a name="[1d0]"></a>Disp_NetPageDispos</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, displaymain.o(i.Disp_NetPageDispos))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Disp_NetPageDispos
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent9
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent8
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent45
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent44
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent43
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent42
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent4
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPeriod
</UL>

<P><STRONG><a name="[1bb]"></a>DisplayCommonMenu</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dispkeyfunction.o(i.DisplayCommonMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBackImage
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetCountDownTime
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent9
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent81
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent80
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent8
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent79
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent78
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent77
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent76
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent75
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent74
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent73
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent7
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent62
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent60
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent6
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent59
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent58
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent57
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent56
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent55
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent54
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent53
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent52
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent51
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent50
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent5
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent49
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent48
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent47
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent46
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent45
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent44
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent43
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent42
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent41
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent40
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent4
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent39
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent38
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent37
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent36
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent34
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent33
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent32
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent3
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent29
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent28
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent27
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent26
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent25
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent24
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent23
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent22
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent21
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent20
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent19
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent18
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent17
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent16
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent15
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent14
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent13
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent12
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent11
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent10
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu3_CodeDispose
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu3_16_CodeDispose
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPeriod
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardDispose
</UL>

<P><STRONG><a name="[26b]"></a>DisplayGunQRCode</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, displaymain.o(i.DisplayGunQRCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = DisplayGunQRCode &rArr; DisplayQRCode &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
</UL>

<P><STRONG><a name="[26c]"></a>DisplayQRCode</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, dwinprotocol.o(i.DisplayQRCode))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = DisplayQRCode &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayGunQRCode
</UL>

<P><STRONG><a name="[271]"></a>Display_HardwareInit</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, displaymain.o(i.Display_HardwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Display_HardwareInit &rArr; BSP_UARTConfigInit &rArr; BSP_UARTTxDMAConfigInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
</UL>

<P><STRONG><a name="[277]"></a>Display_PricSet</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, displaymain.o(i.Display_PricSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Display_PricSet &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent81
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent79
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent78
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent77
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent76
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent75
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent74
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent73
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent47
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent46
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent3
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu48_PrcDispose
</UL>

<P><STRONG><a name="[365]"></a>Display_RevCaseDealGunA</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, connectccu_main.o(i.Display_RevCaseDealGunA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display_RevCaseDealGunA
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGunAmessage
</UL>

<P><STRONG><a name="[366]"></a>Display_RevCaseDealGunB</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, connectccu_main.o(i.Display_RevCaseDealGunB))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Display_RevCaseDealGunB
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGunBmessage
</UL>

<P><STRONG><a name="[278]"></a>Display_ShowSet1</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, displaymain.o(i.Display_ShowSet1))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Display_ShowSet1 &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu52
</UL>

<P><STRONG><a name="[279]"></a>Display_ShowSet2</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, displaymain.o(i.Display_ShowSet2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Display_ShowSet2 &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu53
</UL>

<P><STRONG><a name="[240]"></a>Dispose_LocalUnLock</STRONG> (Thumb, 286 bytes, Stack size 104 bytes, card_cpu.o(i.Dispose_LocalUnLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = Dispose_LocalUnLock &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetRecodeCurNum
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_FrameRx_Timeout
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCardmessage
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardUart_MsgFree
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SetValue
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RWChargeRecode
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StartCard
</UL>

<P><STRONG><a name="[f2]"></a>ETH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.ETH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[374]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[155]"></a>ElecLocked_ControlGunA</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, connectccu_main.o(i.ElecLocked_ControlGunA))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ElecLocked_ControlGunA &rArr; WaitRecvCCUGunA &rArr; ReciveCCUFrame &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCU_FrameRx_GUNATimeout
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRecvCCUGunA
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>ElecLocked_ControlGunB</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, connectccu_main.o(i.ElecLocked_ControlGunB))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ElecLocked_ControlGunB &rArr; WaitRecvCCUGunB &rArr; ReciveCCUFrame &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCU_FrameRx_GUNBTimeout
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRecvCCUGunB
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>ElecUnLocked_ControlGunA</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, connectccu_main.o(i.ElecUnLocked_ControlGunA))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ElecUnLocked_ControlGunA &rArr; WaitRecvCCUGunA &rArr; ReciveCCUFrame &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCU_FrameRx_GUNATimeout
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRecvCCUGunA
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>ElecUnLocked_ControlGunB</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, connectccu_main.o(i.ElecUnLocked_ControlGunB))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ElecUnLocked_ControlGunB &rArr; WaitRecvCCUGunB &rArr; ReciveCCUFrame &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCU_FrameRx_GUNBTimeout
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRecvCCUGunB
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[27c]"></a>FourByteBcdToHex</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dealwithchar.o(i.FourByteBcdToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FourByteBcdToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteBcdToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataAnalyse
</UL>

<P><STRONG><a name="[152]"></a>GDW_ErrFrame</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_ErrFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_ErrFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>GDW_HeartFrame</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_HeartFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_HeartFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>GDW_JustFrame</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_JustFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_JustFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADJust_ControlGunB
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADJust_ControlGunA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>GDW_PowerConfigFrame</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_PowerConfigFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_PowerConfigFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>GDW_ReStartOverFrame</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_ReStartOverFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_ReStartOverFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSend_Frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>GDW_ReStopOverFrame</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_ReStopOverFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_ReStopOverFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSend_Frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>GDW_SDDZLockFrame</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_SDDZLockFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_SDDZLockFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>GDW_SDHandStartFrame</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_SDHandStartFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_SDHandStartFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>GDW_SDSYSConfig1Frame</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_SDSYSConfig1Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_SDSYSConfig1Frame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>GDW_SDSYSConfig2Frame</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_SDSYSConfig2Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_SDSYSConfig2Frame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>GDW_SDSYSConfig3Frame</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_SDSYSConfig3Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_SDSYSConfig3Frame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>GDW_SDServiceFrame</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_SDServiceFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_SDServiceFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>GDW_SDTimeSetFrame</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_SDTimeSetFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_SDTimeSetFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>GDW_SDVersionFrame</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_SDVersionFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_SDVersionFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>GDW_StartFrame</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_StartFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_StartFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>GDW_StopFrame</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, connectccu_frame.o(i.GDW_StopFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = GDW_StopFrame &rArr; BSP_CAN_Write &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[1e3]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LEDInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IOInit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_GPIOInit
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPI2_IO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_RD2Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_PIN_CFG
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_PIN_CFG
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_PIN_CFG
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_PIN_CFG
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_PIN_CFG
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_PIN_CFG
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_PIN_CFG
</UL>

<P><STRONG><a name="[1e2]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_GPIOInit
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPI2_IO
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_PIN_CFG
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_PIN_CFG
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_PIN_CFG
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_PIN_CFG
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_PIN_CFG
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_PIN_CFG
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_PIN_CFG
</UL>

<P><STRONG><a name="[1f5]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MPLSScan
</UL>

<P><STRONG><a name="[2ff]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_RD2Init
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_RDCmd
</UL>

<P><STRONG><a name="[300]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_RDCmd
</UL>

<P><STRONG><a name="[1ef]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LEDWrite
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IOOpen
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IOClose
</UL>

<P><STRONG><a name="[1c1]"></a>GetCardInfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, card_cpu.o(i.GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardDispose
</UL>

<P><STRONG><a name="[23f]"></a>GetCardInfoStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, card_cpu.o(i.GetCardInfoStatus))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StartCard
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Query_Card
</UL>

<P><STRONG><a name="[28c]"></a>GetCardWorkStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, card_cpu.o(i.GetCardWorkStatus))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu3_16_CodeDispose
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu33
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu32
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu22
</UL>

<P><STRONG><a name="[232]"></a>GetChargingInfo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, charging_interface.o(i.GetChargingInfo))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_ChargeingDate
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecode_Dispose
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu33
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendChargeGunB
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendChargeGunA
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendBill
</UL>

<P><STRONG><a name="[219]"></a>GetChargingStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, charging_interface.o(i.GetChargingStatus))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBillingInit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculationBill
</UL>

<P><STRONG><a name="[1a6]"></a>GetCurMenu</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dispkeyfunction.o(i.GetCurMenu))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent81
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent79
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent78
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent77
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent76
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent75
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent74
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent73
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent3
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithKey
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPeriod
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardDispose
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_StatusDivInfo
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowErr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowDivStatus
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DisplayRecvDataAnalyze
</UL>

<P><STRONG><a name="[21c]"></a>GetCurRate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rs485meter.o(i.GetCurRate))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculationBill
</UL>

<P><STRONG><a name="[1c7]"></a>GetCurTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtc_task.o(i.GetCurTime))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent53
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent46
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShowRTC
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvConectCCUAnalyze
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBillingInit
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculationRate
</UL>

<P><STRONG><a name="[21a]"></a>GetCurUnixTimestamp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc_task.o(i.GetCurUnixTimestamp))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBillingInit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculationBill
</UL>

<P><STRONG><a name="[1ec]"></a>GetFormation</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bsp_can.o(i.GetFormation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetFormation
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CanDataProcess
</UL>

<P><STRONG><a name="[1ba]"></a>GetGunCardInfo</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, card_cpu.o(i.GetGunCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_ChargeingDate
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecode_Dispose
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardDispose
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculationBill
</UL>

<P><STRONG><a name="[2f7]"></a>GetMeterStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, charging_interface.o(i.GetMeterStatus))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_GerDivStatus
</UL>

<P><STRONG><a name="[21b]"></a>GetPowerChangeFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rs485meter.o(i.GetPowerChangeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculationBill
</UL>

<P><STRONG><a name="[1f9]"></a>HEXtoBCD</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dwinprotocol.o(i.HEXtoBCD))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCGetTime
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu54_SetTimeDispose
</UL>

<P><STRONG><a name="[27f]"></a>HFQGFreamSend</STRONG> (Thumb, 270 bytes, Stack size 224 bytes, hfqgframe.o(i.HFQGFreamSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = HFQGFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDevNum
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_xor_Data
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendRegister
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendHear
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendChargeGunB
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendChargeGunA
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSendBill
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendStocpAck
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendStartAck
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendBill
</UL>

<P><STRONG><a name="[aa]"></a>HFQG_RecvBillAck</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, hfqgframe.o(i.HFQG_RecvBillAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HFQG_RecvBillAck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>HFQG_RecvChargeInfoAck</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hfqgframe.o(i.HFQG_RecvChargeInfoAck))
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>HFQG_RecvChargeInfoQuery</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hfqgframe.o(i.HFQG_RecvChargeInfoQuery))
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[a3]"></a>HFQG_RecvDevStateAck</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hfqgframe.o(i.HFQG_RecvDevStateAck))
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>HFQG_RecvDevStateQuery</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hfqgframe.o(i.HFQG_RecvDevStateQuery))
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[283]"></a>HFQG_RecvFrameDispose</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, hfqgframe.o(i.HFQG_RecvFrameDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HFQG_RecvFrameDispose
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
</UL>

<P><STRONG><a name="[a2]"></a>HFQG_RecvHearAck</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hfqgframe.o(i.HFQG_RecvHearAck))
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>HFQG_RecvRegisterAck</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hfqgframe.o(i.HFQG_RecvRegisterAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HFQG_RecvRegisterAck
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetAppRegisterState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>HFQG_RecvStartCharge</STRONG> (Thumb, 802 bytes, Stack size 48 bytes, hfqgframe.o(i.HFQG_RecvStartCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = HFQG_RecvStartCharge &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Get4GMainEvent
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetPriceInfo
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSendTaskEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>HFQG_RecvStopCharge</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, hfqgframe.o(i.HFQG_RecvStopCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = HFQG_RecvStopCharge &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Get4GMainEvent
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSendTaskEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>HFQG_RecvStopChargeAck</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hfqgframe.o(i.HFQG_RecvStopChargeAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HFQG_RecvStopChargeAck
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSendTaskEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[286]"></a>HFQG_SendBill</STRONG> (Thumb, 698 bytes, Stack size 16 bytes, hfqgframe.o(i.HFQG_SendBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = HFQG_SendBill &rArr; HFQGFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoHEX
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingInfo
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetMeterPowerInfo
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQGFreamSend
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[9f]"></a>HFQG_SendChargeGunA</STRONG> (Thumb, 732 bytes, Stack size 16 bytes, hfqgframe.o(i.HFQG_SendChargeGunA))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = HFQG_SendChargeGunA &rArr; HFQGFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoHEX
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingInfo
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetMeterPowerInfo
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQGFreamSend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>HFQG_SendChargeGunB</STRONG> (Thumb, 752 bytes, Stack size 16 bytes, hfqgframe.o(i.HFQG_SendChargeGunB))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = HFQG_SendChargeGunB &rArr; HFQGFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoHEX
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingInfo
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetMeterPowerInfo
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQGFreamSend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[9e]"></a>HFQG_SendDevState</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, hfqgframe.o(i.HFQG_SendDevState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HFQG_SendDevState
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetGunState
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetErrState
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetMeterPowerInfo
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[33c]"></a>HFQG_SendDevStop</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, hfqgframe.o(i.HFQG_SendDevStop))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[289]"></a>HFQG_SendFrameDispose</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, hfqgframe.o(i.HFQG_SendFrameDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = HFQG_SendFrameDispose &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[9d]"></a>HFQG_SendHear</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hfqgframe.o(i.HFQG_SendHear))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = HFQG_SendHear &rArr; HFQGFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQGFreamSend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>HFQG_SendRegister</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hfqgframe.o(i.HFQG_SendRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = HFQG_SendRegister &rArr; HFQGFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQGFreamSend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetAppRegisterState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hfqgframe.o(.data)
</UL>
<P><STRONG><a name="[28a]"></a>HFQG_SendStartAck</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, hfqgframe.o(i.HFQG_SendStartAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = HFQG_SendStartAck &rArr; HFQGFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetGunState
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQGFreamSend
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[28b]"></a>HFQG_SendStocpAck</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hfqgframe.o(i.HFQG_SendStocpAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = HFQG_SendStocpAck &rArr; HFQGFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQGFreamSend
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[6]"></a>HYDisplayMenu0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu0))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>HYDisplayMenu1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu1))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>HYDisplayMenu10</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu10))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>HYDisplayMenu11</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu11))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>HYDisplayMenu12</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu12))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>HYDisplayMenu13</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu13))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>HYDisplayMenu14</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu14))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>HYDisplayMenu15</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu15))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>HYDisplayMenu16</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu16))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>HYDisplayMenu17</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu17))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>HYDisplayMenu18</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu18))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>HYDisplayMenu19</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu19))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>HYDisplayMenu2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu2))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>HYDisplayMenu20</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu20))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>HYDisplayMenu21</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu21))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>HYDisplayMenu22</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, dispkeyfunction.o(i.HYDisplayMenu22))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = HYDisplayMenu22 &rArr; SendCardMsg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardMsg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>HYDisplayMenu23</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu23))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>HYDisplayMenu24</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu24))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>HYDisplayMenu25</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu25))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>HYDisplayMenu26</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu26))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>HYDisplayMenu27</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu27))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>HYDisplayMenu28</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu28))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>HYDisplayMenu29</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu29))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>HYDisplayMenu3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu3))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>HYDisplayMenu30</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu30))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>HYDisplayMenu31</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu31))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>HYDisplayMenu32</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, dispkeyfunction.o(i.HYDisplayMenu32))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = HYDisplayMenu32 &rArr; SendCardMsg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardMsg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardWorkStatus
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetChargeRecodeInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>HYDisplayMenu33</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, dispkeyfunction.o(i.HYDisplayMenu33))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = HYDisplayMenu33 &rArr; SendCardMsg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardMsg
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingInfo
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>HYDisplayMenu34</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu34))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>HYDisplayMenu35</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu35))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>HYDisplayMenu36</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dispkeyfunction.o(i.HYDisplayMenu36))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = HYDisplayMenu36 &rArr; Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetChargeingInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>HYDisplayMenu37</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dispkeyfunction.o(i.HYDisplayMenu37))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = HYDisplayMenu37 &rArr; Dis_ShowStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetChargeingInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent81
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent79
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent78
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent77
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent76
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent75
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent74
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent73
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>HYDisplayMenu38</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dispkeyfunction.o(i.HYDisplayMenu38))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYDisplayMenu38 &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCarInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent81
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent79
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent78
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent77
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent76
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent75
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent74
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent73
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>HYDisplayMenu39</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dispkeyfunction.o(i.HYDisplayMenu39))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYDisplayMenu39 &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCarInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>HYDisplayMenu4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu4))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>HYDisplayMenu40</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu40))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>HYDisplayMenu41</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu41))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>HYDisplayMenu42</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dispkeyfunction.o(i.HYDisplayMenu42))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HYDisplayMenu42 &rArr; DispShow_StatusDivInfo &rArr; Dis_ShowDivStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_StatusDivInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>HYDisplayMenu43</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dispkeyfunction.o(i.HYDisplayMenu43))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HYDisplayMenu43 &rArr; DispShow_StatusDivInfo &rArr; Dis_ShowDivStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_StatusDivInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>HYDisplayMenu44</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dispkeyfunction.o(i.HYDisplayMenu44))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HYDisplayMenu44 &rArr; DispShow_StatusDivInfo &rArr; Dis_ShowDivStatus &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_StatusDivInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>HYDisplayMenu45</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu45))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>HYDisplayMenu46</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu46))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>HYDisplayMenu47</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu47))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>HYDisplayMenu48</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu48))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>HYDisplayMenu49</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu49))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>HYDisplayMenu5</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu5))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>HYDisplayMenu50</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dispkeyfunction.o(i.HYDisplayMenu50))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYDisplayMenu50 &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetChargeingInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>HYDisplayMenu51</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dispkeyfunction.o(i.HYDisplayMenu51))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HYDisplayMenu51 &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetChargeingInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>HYDisplayMenu52</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dispkeyfunction.o(i.HYDisplayMenu52))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = HYDisplayMenu52 &rArr; Display_ShowSet1 &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ShowSet1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>HYDisplayMenu53</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dispkeyfunction.o(i.HYDisplayMenu53))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYDisplayMenu53 &rArr; Display_ShowSet2 &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ShowSet2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>HYDisplayMenu54</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu54))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>HYDisplayMenu55</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu55))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>HYDisplayMenu56</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu56))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>HYDisplayMenu57</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu57))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>HYDisplayMenu58</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu58))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>HYDisplayMenu59</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu59))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>HYDisplayMenu6</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu6))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>HYDisplayMenu60</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu60))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>HYDisplayMenu61</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu61))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>HYDisplayMenu62</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu62))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>HYDisplayMenu63</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu63))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>HYDisplayMenu64</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu64))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>HYDisplayMenu65</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu65))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>HYDisplayMenu7</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu7))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>HYDisplayMenu73</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu73))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>HYDisplayMenu74</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu74))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>HYDisplayMenu75</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu75))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>HYDisplayMenu76</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu76))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>HYDisplayMenu77</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu77))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>HYDisplayMenu78</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu78))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>HYDisplayMenu79</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu79))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>HYDisplayMenu8</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu8))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>HYDisplayMenu80</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu80))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>HYDisplayMenu81</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu81))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>HYDisplayMenu9</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkeyfunction.o(i.HYDisplayMenu9))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>HYKeyEvent0</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent0))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>HYKeyEvent1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent1))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>HYKeyEvent10</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent10))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent10 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>HYKeyEvent11</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent11))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent11 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>HYKeyEvent12</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent12))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent12 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>HYKeyEvent13</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent13))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent13 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>HYKeyEvent14</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent14))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent14 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>HYKeyEvent15</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent15))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent15 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>HYKeyEvent16</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent16))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent16 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>HYKeyEvent17</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent17))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent17 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>HYKeyEvent18</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent18))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent18 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>HYKeyEvent19</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent19))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent19 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>HYKeyEvent2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent2))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>HYKeyEvent20</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent20))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent20 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>HYKeyEvent21</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent21))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent21 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>HYKeyEvent22</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent22))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent22 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>HYKeyEvent23</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent23))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent23 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>HYKeyEvent24</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent24))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent24 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>HYKeyEvent25</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent25))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent25 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>HYKeyEvent26</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent26))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent26 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>HYKeyEvent27</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent27))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent27 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>HYKeyEvent28</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent28))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent28 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>HYKeyEvent29</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent29))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent29 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>HYKeyEvent3</STRONG> (Thumb, 494 bytes, Stack size 24 bytes, dispkey.o(i.HYKeyEvent3))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent3 &rArr; APP_SelectCurChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetRecodeCurNum
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetGunState
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetErrState
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>HYKeyEvent30</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent30))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>HYKeyEvent31</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent31))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>HYKeyEvent32</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent32))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent32 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>HYKeyEvent33</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent33))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent33 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>HYKeyEvent34</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent34))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent34 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>HYKeyEvent35</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent35))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>HYKeyEvent36</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent36))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent36 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>HYKeyEvent37</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent37))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent37 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>HYKeyEvent38</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent38))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent38 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>HYKeyEvent39</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent39))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent39 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>HYKeyEvent4</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent4))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent4 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NetPageDispos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>HYKeyEvent40</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent40))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent40 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>HYKeyEvent41</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent41))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent41 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>HYKeyEvent42</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent42))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent42 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NetPageDispos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>HYKeyEvent43</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent43))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent43 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NetPageDispos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>HYKeyEvent44</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent44))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent44 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NetPageDispos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>HYKeyEvent45</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent45))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent45 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NetPageDispos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>HYKeyEvent46</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent46))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent46 &rArr; Display_PricSet &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurTime
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>HYKeyEvent47</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent47))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent47 &rArr; Display_PricSet &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>HYKeyEvent48</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent48))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent48 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>HYKeyEvent49</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent49))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent49 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>HYKeyEvent5</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent5))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent5 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>HYKeyEvent50</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent50))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent50 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStopChargeMsg
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>HYKeyEvent51</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent51))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent51 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStopChargeMsg
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>HYKeyEvent52</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent52))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent52 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>HYKeyEvent53</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, dispkey.o(i.HYKeyEvent53))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent53 &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurTime
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetRecodeCurNum
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>HYKeyEvent54</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent54))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent54 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>HYKeyEvent55</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent55))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent55 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendElecLockMsg
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>HYKeyEvent56</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent56))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent56 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>HYKeyEvent57</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent57))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent57 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJustMsg
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>HYKeyEvent58</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent58))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent58 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJustMsg
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>HYKeyEvent59</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent59))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent59 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJustMsg
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>HYKeyEvent6</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent6))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent6 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>HYKeyEvent60</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent60))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent60 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>HYKeyEvent61</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent61))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>HYKeyEvent62</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent62))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent62 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>HYKeyEvent63</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent63))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>HYKeyEvent64</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent64))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>HYKeyEvent65</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent65))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>HYKeyEvent66</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dispkey.o(i.HYKeyEvent66))
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>HYKeyEvent7</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dispkey.o(i.HYKeyEvent7))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent7 &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>HYKeyEvent73</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, dispkey.o(i.HYKeyEvent73))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent73 &rArr; APP_SelectCurChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StopCharge
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StartCharge
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu38
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu37
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetRecodeCurNum
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>HYKeyEvent74</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, dispkey.o(i.HYKeyEvent74))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent74 &rArr; APP_SelectCurChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StopCharge
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StartCharge
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu38
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu37
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetRecodeCurNum
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>HYKeyEvent75</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, dispkey.o(i.HYKeyEvent75))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent75 &rArr; APP_SelectCurChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StopCharge
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StartCharge
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu38
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu37
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetRecodeCurNum
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[90]"></a>HYKeyEvent76</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, dispkey.o(i.HYKeyEvent76))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent76 &rArr; APP_SelectCurChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StopCharge
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StartCharge
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu38
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu37
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetRecodeCurNum
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>HYKeyEvent77</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, dispkey.o(i.HYKeyEvent77))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent77 &rArr; APP_SelectCurChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StopCharge
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StartCharge
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu38
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu37
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetRecodeCurNum
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>HYKeyEvent78</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, dispkey.o(i.HYKeyEvent78))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent78 &rArr; APP_SelectCurChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StopCharge
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StartCharge
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu38
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu37
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetRecodeCurNum
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>HYKeyEvent79</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, dispkey.o(i.HYKeyEvent79))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent79 &rArr; APP_SelectCurChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StopCharge
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StartCharge
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu38
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu37
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetRecodeCurNum
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>HYKeyEvent8</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent8))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent8 &rArr; APP_SelectUpNChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NetPageDispos
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>HYKeyEvent80</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, dispkey.o(i.HYKeyEvent80))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent80 &rArr; APP_SelectCurChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StopCharge
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StartCharge
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu38
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu37
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetRecodeCurNum
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>HYKeyEvent81</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, dispkey.o(i.HYKeyEvent81))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent81 &rArr; APP_SelectCurChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StopCharge
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StartCharge
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu38
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu37
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetRecodeCurNum
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ClearRecodeInfo
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>HYKeyEvent9</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dispkey.o(i.HYKeyEvent9))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = HYKeyEvent9 &rArr; APP_SelectUpNChargeRecode &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NetPageDispos
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menudisp.o(.data)
</UL>
<P><STRONG><a name="[ad]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[298]"></a>Head_Recved</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, connectccu_main.o(i.Head_Recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Head_Recved &rArr; TCU_FrameRx_GUNBTimeout &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCU_FrameRx_GUNBTimeout
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCU_FrameRx_GUNATimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_Heart
</UL>

<P><STRONG><a name="[299]"></a>InitConnectCCUCAN</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, connectccu_main.o(i.InitConnectCCUCAN))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = InitConnectCCUCAN &rArr; BSP_CAN_Init &rArr; CAN_Configuration &rArr; CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_Init
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCntCCUMain
</UL>

<P><STRONG><a name="[34d]"></a>IsEmpty</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_uart.o(i.IsEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveMsgHook
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PopOneByte
</UL>

<P><STRONG><a name="[34f]"></a>IsFull</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bsp_uart.o(i.IsFull))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PushOneByte
</UL>

<P><STRONG><a name="[291]"></a>KeyControl</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dwinprotocol.o(i.KeyControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = KeyControl &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetDispUartStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent81
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent79
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent78
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent77
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent76
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent75
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent74
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent73
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent3
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent23
</UL>

<P><STRONG><a name="[ae]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[29d]"></a>MeterDataAnalyse</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, rs485meter.o(i.MeterDataAnalyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MeterDataAnalyse &rArr; FourByteBcdToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FourByteBcdToHex
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPowerChangeFlag
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompareAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMeterTask
</UL>

<P><STRONG><a name="[24d]"></a>ModuleSIM7600_ConnectServer</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, modulesim7600.o(i.ModuleSIM7600_ConnectServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ModuleSIM7600_ConnectServer &rArr; Module_ConnectServer &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NETOPEN
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>

<P><STRONG><a name="[282]"></a>ModuleSIM7600_SendData</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, modulesim7600.o(i.ModuleSIM7600_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPSEND
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQGFreamSend
</UL>

<P><STRONG><a name="[24a]"></a>Module_SIM7600Test</STRONG> (Thumb, 352 bytes, Stack size 8 bytes, modulesim7600.o(i.Module_SIM7600Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Module_SIM7600Test &rArr; Send_AT_CSQ &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CSQ
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_SetCIPRXGET
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NOTCIPMODE
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIMI
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CGDCONT
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>

<P><STRONG><a name="[ac]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2ae]"></a>NVIC_Configuration</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, sysconfig.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b1]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[2b0]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[2af]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[297]"></a>Net_StartCharge</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, displaymain.o(i.Net_StartCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = Net_StartCharge &rArr; SendPricMsg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPricMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent81
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent79
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent78
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent77
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent76
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent75
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent74
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent73
</UL>

<P><STRONG><a name="[1c9]"></a>Net_StopCharge</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, displaymain.o(i.Net_StopCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = Net_StopCharge &rArr; SendStopChargeMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStopChargeMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent81
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent79
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent78
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent77
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent76
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent75
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent74
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent73
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvConectCCUAnalyze
</UL>

<P><STRONG><a name="[2b2]"></a>OSEventNameSet</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ucos_ii.o(i.OSEventNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[2b3]"></a>OSInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ucos_ii.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b4]"></a>OSInitHookBegin</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[2bf]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[211]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ucos_ii.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[212]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ucos_ii.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[1ed]"></a>OSMboxPost</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ucos_ii.o(i.OSMboxPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSMboxPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CanDataProcess
</UL>

<P><STRONG><a name="[200]"></a>OSMemCreate</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, ucos_ii.o(i.OSMemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSMemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
</UL>

<P><STRONG><a name="[2c4]"></a>OSMemGet</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, ucos_ii.o(i.OSMemGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSMemGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveMsgHook
</UL>

<P><STRONG><a name="[2c5]"></a>OSMemPut</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ucos_ii.o(i.OSMemPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FreeOneMsg
</UL>

<P><STRONG><a name="[2c6]"></a>OSMutexCreate</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ucos_ii.o(i.OSMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
</UL>

<P><STRONG><a name="[2c8]"></a>OSMutexPend</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, ucos_ii.o(i.OSMutexPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSMutexPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>

<P><STRONG><a name="[2cb]"></a>OSMutexPost</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, ucos_ii.o(i.OSMutexPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>

<P><STRONG><a name="[22f]"></a>OSQCreate</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, ucos_ii.o(i.OSQCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCntCCUMain
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSendTCUFrame
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRMsgDisposeGunB
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRMsgDisposeGunA
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_HardwareInit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485MetterInit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingInit
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HardwareInit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRecv_HardwareInit
</UL>

<P><STRONG><a name="[2cd]"></a>OSQFlush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ucos_ii.o(i.OSQFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSQFlush
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCntCCUMain
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCardStk
</UL>

<P><STRONG><a name="[22a]"></a>OSQPend</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, ucos_ii.o(i.OSQPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMeterStk
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCardStk
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRecvCCUGunB
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRecvCCUGunA
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGunBmessage
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGunAmessage
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitConnectCCUmessage
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSendTCUFrame
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCardmessage
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardUart_MsgFree
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMeterTask
</UL>

<P><STRONG><a name="[1c8]"></a>OSQPost</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ucos_ii.o(i.OSQPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CanDataProcess
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReceiveMsgHook
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunB
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunA
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvConectCCUAnalyze
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardMsg
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitConnectCCUmessage
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecUnLocked_ControlGunB
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecUnLocked_ControlGunA
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecLocked_ControlGunB
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecLocked_ControlGunA
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStop_ControlGunB
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStop_ControlGunA
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStart_ControlGunB
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStart_ControlGunA
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_StopOver
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMsg_Send
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPricMsg
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_RecvStopCharge
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_RecvStartCharge
</UL>

<P><STRONG><a name="[1d2]"></a>OSSchedLock</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ucos_ii.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendBufLenClear
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StopCharge
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StartCharge
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetDispUartStatus
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetCountDownTime
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurMenu
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReciveCCUFrame
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SetReAct_Ack
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck1Cmd_Ack
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck0Cmd_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_NETOPEN_Ack
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CSQ_Ack
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIPMODE_Ack
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIMI_Ack
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CGDCONT_Ack
</UL>

<P><STRONG><a name="[1d3]"></a>OSSchedUnlock</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ucos_ii.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendBufLenClear
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StopCharge
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StartCharge
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetDispUartStatus
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetCountDownTime
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurMenu
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReciveCCUFrame
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SetReAct_Ack
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck1Cmd_Ack
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_SendAck0Cmd_Ack
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_NETOPEN_Ack
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1_Ack
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer1Cmd_Ack
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0_Ack
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_ConnectServer0Cmd_Ack
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CSQ_Ack
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIPMODE_Ack
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CIMI_Ack
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_CGDCONT_Ack
</UL>

<P><STRONG><a name="[2ce]"></a>OSSemCreate</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ucos_ii.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[2cf]"></a>OSSemPend</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, ucos_ii.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[2d0]"></a>OSSemPost</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ucos_ii.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[2d1]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ucos_ii.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d3]"></a>OSStatInit</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ucos_ii.o(i.OSStatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task_core
</UL>

<P><STRONG><a name="[2d4]"></a>OSTCBInitHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTCBInitHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[2d6]"></a>OSTaskCreateExt</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, ucos_ii.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCntCCUMain
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task_core
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[2da]"></a>OSTaskCreateHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[2dc]"></a>OSTaskDel</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, ucos_ii.o(i.OSTaskDel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[2df]"></a>OSTaskDelHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskDelHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskDelHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskDelHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[2e1]"></a>OSTaskIdleHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[2e3]"></a>OSTaskReturnHook</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskReturnHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskReturnHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskReturnHook
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskReturn
</UL>

<P><STRONG><a name="[2e5]"></a>OSTaskStatHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskStatHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[2e7]"></a>OSTaskStkChk</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, ucos_ii.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[2d8]"></a>OSTaskStkInit</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[230]"></a>OSTaskSuspend</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ucos_ii.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRTC
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCntCCUMain
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRMsgDisposeGunB
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRMsgDisposeGunA
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_HardwareInit
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485MetterInit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingInit
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HardwareInit
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRecv_HardwareInit
</UL>

<P><STRONG><a name="[10a]"></a>OSTaskSwHook</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTaskSwHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[2e9]"></a>OSTick_Init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, sysconfig.o(i.OSTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OSTick_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[20d]"></a>OSTimeDly</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ucos_ii.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRTC
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMeterStk
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCardStk
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskLED
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task_core
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent81
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent79
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent78
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent77
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent76
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent75
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent74
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent73
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent3
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent23
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTime
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraPerprintBackImage
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardMsg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecUnLocked_ControlGunB
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecUnLocked_ControlGunA
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecLocked_ControlGunB
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecLocked_ControlGunA
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStop_ControlGunB
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStop_ControlGunA
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStart_ControlGunB
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStart_ControlGunA
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_StopFrame
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_StartFrame
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDVersionFrame
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDTimeSetFrame
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDServiceFrame
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDSYSConfig3Frame
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDSYSConfig2Frame
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDSYSConfig1Frame
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDHandStartFrame
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_SDDZLockFrame
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_ReStopOverFrame
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_ReStartOverFrame
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_PowerConfigFrame
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_JustFrame
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_HeartFrame
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_ErrFrame
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WriterBlock
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SetValue
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReadBlock
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AuthKey
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ActiveCard
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StartCard
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Query_Card
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchMeterData
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQGFreamSend
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>

<P><STRONG><a name="[2ec]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, ucos_ii.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCntCCUMain
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSendTCUFrame
</UL>

<P><STRONG><a name="[1be]"></a>OSTimeGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ucos_ii.o(i.OSTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent81
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent80
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent79
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent78
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent77
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent76
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent75
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent74
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent73
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent3
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispose_SendStartCharge
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvConectCCUAnalyze
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardDispose
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu33
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu32
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu22
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCU_FrameRx_GUNBTimeout
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCU_FrameRx_GUNATimeout
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskSendTCUFrame
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_FrameRx_Timeout
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSendBill
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendFrameDispose
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendBill
</UL>

<P><STRONG><a name="[2ed]"></a>OSTimeTick</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, ucos_ii.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; App_TimeTickHook &rArr; UART_ReceiveMsgHook &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
</UL>

<P><STRONG><a name="[2ee]"></a>OSTimeTickHook</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; App_TimeTickHook &rArr; UART_ReceiveMsgHook &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[2ef]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ucos_ii.o(i.OSTmrSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[2be]"></a>OSTmr_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ucos_ii.o(i.OSTmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b4]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OS_CPU_SysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = OS_CPU_SysTickHandler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; App_TimeTickHook &rArr; UART_ReceiveMsgHook &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2de]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ucos_ii.o(i.OS_Dummy))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[2c2]"></a>OS_EventTaskRdy</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, ucos_ii.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
</UL>

<P><STRONG><a name="[2ca]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ucos_ii.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>

<P><STRONG><a name="[2c9]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, ucos_ii.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>

<P><STRONG><a name="[2c7]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ucos_ii.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>

<P><STRONG><a name="[2b9]"></a>OS_FlagInit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ucos_ii.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[2dd]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, ucos_ii.o(i.OS_FlagUnlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[2f0]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ucos_ii.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[2ba]"></a>OS_MemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ucos_ii.o(i.OS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[2bb]"></a>OS_QInit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ucos_ii.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[2c3]"></a>OS_Sched</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ucos_ii.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMboxPost
</UL>

<P><STRONG><a name="[2d9]"></a>OS_TCBInit</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, ucos_ii.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[10d]"></a>OS_TaskIdle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ucos_ii.o(i.OS_TaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_TaskIdle &rArr; OSTaskIdleHook
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ucos_ii.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[10b]"></a>OS_TaskReturn</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ucos_ii.o(i.OS_TaskReturn))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OS_TaskReturn &rArr; OSTaskDel &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskReturnHook
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_c.o(i.OSTaskStkInit)
</UL>
<P><STRONG><a name="[10e]"></a>OS_TaskStat</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, ucos_ii.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ucos_ii.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[2f5]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ucos_ii.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[2d7]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ucos_ii.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[f8]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OTG_FS_IRQHandler &rArr; USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[302]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[159]"></a>PowerSet_ControlGunA</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, connectccu_main.o(i.PowerSet_ControlGunA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerSet_ControlGunA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>PowerSet_ControlGunB</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, connectccu_main.o(i.PowerSet_ControlGunB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PowerSet_ControlGunB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[2f9]"></a>PraPerprintBackImage</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dwinprotocol.o(i.PraPerprintBackImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = PraPerprintBackImage &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetDispUartStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBackImage
</UL>

<P><STRONG><a name="[26a]"></a>PrintBackImage</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dwinprotocol.o(i.PrintBackImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = PrintBackImage &rArr; PraPerprintBackImage &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraPerprintBackImage
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>

<P><STRONG><a name="[264]"></a>PrintIcon</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dwinprotocol.o(i.PrintIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = PrintIcon &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetDispUartStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_State
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_NetState
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_CSQState
</UL>

<P><STRONG><a name="[1cc]"></a>PrintNum16uVariable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dwinprotocol.o(i.PrintNum16uVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetDispUartStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountDownDispose
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ShowSet2
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_StatusDivInfo
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu51
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu50
</UL>

<P><STRONG><a name="[1c2]"></a>PrintNum32uVariable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dwinprotocol.o(i.PrintNum32uVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = PrintNum32uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendFourBytes
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetDispUartStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardDispose
</UL>

<P><STRONG><a name="[255]"></a>PrintStr</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, dwinprotocol.o(i.PrintStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetDispUartStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu38
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu37
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_Recode
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_ChargeingDate
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_CardDate
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ShowSet2
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ShowSet1
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu39
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu36
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowErr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowDivStatus
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_EndChargeDate
</UL>

<P><STRONG><a name="[292]"></a>PrintTime</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, dwinprotocol.o(i.PrintTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = PrintTime &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteBcdToHex
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetDispUartStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent53
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent46
</UL>

<P><STRONG><a name="[16e]"></a>ProtocolOperation_CCUYC</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, connectccu_interface.o(i.ProtocolOperation_CCUYC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ProtocolOperation_CCUYC
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>ProtocolOperation_CCUYX1</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, connectccu_interface.o(i.ProtocolOperation_CCUYX1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ProtocolOperation_CCUYX1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>ProtocolOperation_CCUYX2</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, connectccu_interface.o(i.ProtocolOperation_CCUYX2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ProtocolOperation_CCUYX2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>ProtocolOperation_Err</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, connectccu_interface.o(i.ProtocolOperation_Err))
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>ProtocolOperation_Heart</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, connectccu_interface.o(i.ProtocolOperation_Heart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ProtocolOperation_Heart &rArr; Head_Recved &rArr; TCU_FrameRx_GUNBTimeout &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Head_Recved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>ProtocolOperation_ReDZLockSet</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, connectccu_interface.o(i.ProtocolOperation_ReDZLockSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtocolOperation_ReDZLockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU_ReFrame_StateSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>ProtocolOperation_ReHandSet</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, connectccu_interface.o(i.ProtocolOperation_ReHandSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtocolOperation_ReHandSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU_ReFrame_StateSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>ProtocolOperation_ReJust</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, connectccu_interface.o(i.ProtocolOperation_ReJust))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtocolOperation_ReJust
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU_ReFrame_StateSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>ProtocolOperation_RePowerSet</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, connectccu_interface.o(i.ProtocolOperation_RePowerSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtocolOperation_RePowerSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU_ReFrame_StateSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>ProtocolOperation_ReServiceSet</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, connectccu_interface.o(i.ProtocolOperation_ReServiceSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtocolOperation_ReServiceSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU_ReFrame_StateSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>ProtocolOperation_ReSysParaSet1</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, connectccu_interface.o(i.ProtocolOperation_ReSysParaSet1))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ProtocolOperation_ReSysParaSet1 &rArr; StopSend_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSend_Frame
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU_ReFrame_StateSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>ProtocolOperation_ReSysParaSet2</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, connectccu_interface.o(i.ProtocolOperation_ReSysParaSet2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ProtocolOperation_ReSysParaSet2 &rArr; StopSend_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSend_Frame
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU_ReFrame_StateSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>ProtocolOperation_ReSysParaSet3</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, connectccu_interface.o(i.ProtocolOperation_ReSysParaSet3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ProtocolOperation_ReSysParaSet3 &rArr; StopSend_Frame
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopSend_Frame
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU_ReFrame_StateSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>ProtocolOperation_ReTimeSet</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, connectccu_interface.o(i.ProtocolOperation_ReTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtocolOperation_ReTimeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU_ReFrame_StateSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>ProtocolOperation_ReVersion</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, connectccu_interface.o(i.ProtocolOperation_ReVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtocolOperation_ReVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU_ReFrame_StateSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>ProtocolOperation_Restart</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, connectccu_interface.o(i.ProtocolOperation_Restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtocolOperation_Restart
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU_ReFrame_StateSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>ProtocolOperation_Restop</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, connectccu_interface.o(i.ProtocolOperation_Restop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ProtocolOperation_Restop
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU_ReFrame_StateSet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>ProtocolOperation_StartOver</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, connectccu_interface.o(i.ProtocolOperation_StartOver))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ProtocolOperation_StartOver
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReStartover
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU_ReFrame_StateSet
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>ProtocolOperation_StopOver</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, connectccu_interface.o(i.ProtocolOperation_StopOver))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = ProtocolOperation_StopOver &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReStopover
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU_ReFrame_StateSet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispEvent
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[1f1]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LEDInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IOInit
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPI2_IO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_RD2Init
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_PIN_CFG
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_PIN_CFG
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_PIN_CFG
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_PIN_CFG
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_PIN_CFG
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_PIN_CFG
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_PIN_CFG
</UL>

<P><STRONG><a name="[1e1]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_CAN_GPIOInit
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_CfgSPI2
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_PIN_CFG
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_PIN_CFG
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_PIN_CFG
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_PIN_CFG
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_PIN_CFG
</UL>

<P><STRONG><a name="[216]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[344]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART6_PIN_CFG
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_PIN_CFG
</UL>

<P><STRONG><a name="[2ea]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTick_Init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[304]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[303]"></a>RCC_LSEConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[306]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[305]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[2fd]"></a>RS485MetterInit</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, rs485meter.o(i.RS485MetterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = RS485MetterInit &rArr; BSP_UARTConfigInit &rArr; BSP_UARTTxDMAConfigInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMeterStk
</UL>

<P><STRONG><a name="[204]"></a>RS485_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, bsp_rs485.o(i.RS485_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RS485_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRS485Table
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
</UL>

<P><STRONG><a name="[20c]"></a>RS485_RDCmd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, bsp_rs485.o(i.RS485_RDCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RS485_RDCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchRS485Table
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR
</UL>

<P><STRONG><a name="[373]"></a>RTC_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[301]"></a>RTC_Config</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_rtc.o(i.RTC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_Config &rArr; RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[30a]"></a>RTC_EnterInitMode</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[30b]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[1f8]"></a>RTC_GetDate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCGetTime
</UL>

<P><STRONG><a name="[1f7]"></a>RTC_GetTime</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCGetTime
</UL>

<P><STRONG><a name="[308]"></a>RTC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[372]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
</UL>

<P><STRONG><a name="[30c]"></a>RTC_SetDate</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeAndDate_Set
</UL>

<P><STRONG><a name="[30e]"></a>RTC_SetTime</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeAndDate_Set
</UL>

<P><STRONG><a name="[1fc]"></a>RTC_TimeAndDate_Set</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bsp_rtc.o(i.RTC_TimeAndDate_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTC_TimeAndDate_Set &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCSetTime
</UL>

<P><STRONG><a name="[307]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>

<P><STRONG><a name="[30f]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(i.RTC_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeAndDate_Set
</UL>

<P><STRONG><a name="[310]"></a>ReSendBill</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, hfqgframe.o(i.ReSendBill))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = ReSendBill &rArr; HFQGFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQGFreamSend
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
</UL>

<P><STRONG><a name="[293]"></a>ReadDwinVariable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dwinprotocol.o(i.ReadDwinVariable))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ReadDwinVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetDispUartStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent54
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent51
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent50
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent48
</UL>

<P><STRONG><a name="[311]"></a>ReadMeterTask</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, rs485meter.o(i.ReadMeterTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ReadMeterTask &rArr; SearchMeterData &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MsgDeal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FreeOneMsg
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMeterStatus
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchMeterData
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataAnalyse
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskMeterStk
</UL>

<P><STRONG><a name="[314]"></a>ReciveCCUFrame</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, connectccu_main.o(i.ReciveCCUFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ReciveCCUFrame &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRecvCCUGunB
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRecvCCUGunA
</UL>

<P><STRONG><a name="[31c]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[31b]"></a>SDIO_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[e6]"></a>SDIO_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[31d]"></a>SDIO_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[250]"></a>SD_ProcessDMAIRQ</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SD_ProcessDMAIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_ProcessDMAIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[319]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, bsp_sdio_sd.o(i.SD_ProcessIRQSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SD_ProcessIRQSrc
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[24e]"></a>SIM7600CloseNet</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulesim7600.o(i.SIM7600CloseNet))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SIM7600CloseNet &rArr; Send_AT_CIPCLOSE &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>

<P><STRONG><a name="[24b]"></a>SIM7600Reset</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, modulesim7600.o(i.SIM7600Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SIM7600Reset &rArr; Send_AT_CIPCLOSE &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IOOpen
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IOClose
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NETCLOSE
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>

<P><STRONG><a name="[320]"></a>SIM7600_RecvDesposeCmd</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, modulesim7600.o(i.SIM7600_RecvDesposeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SIM7600_RecvDesposeCmd &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
</UL>

<P><STRONG><a name="[371]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_CfgSPI2
</UL>

<P><STRONG><a name="[32f]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_SendByte
</UL>

<P><STRONG><a name="[331]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_SendByte
</UL>

<P><STRONG><a name="[330]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_I2S_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_SendByte
</UL>

<P><STRONG><a name="[370]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_CfgSPI2
</UL>

<P><STRONG><a name="[324]"></a>SST26_EraseSector</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi_flash.o(i.SST26_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SST26_EraseSector &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_SendByte
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WriteEnable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WaitForWriteEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_AutoWritePage
</UL>

<P><STRONG><a name="[32a]"></a>SST26_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, spi_flash.o(i.SST26_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SST26_Init &rArr; SST26_ReadID_Test &rArr; SST26_ReadID &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_ReadID_Test
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_UnlockGlobal
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPI2
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task_core
</UL>

<P><STRONG><a name="[325]"></a>SST26_PageWrite</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, spi_flash.o(i.SST26_PageWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_SendByte
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WriteEnable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WaitForWriteEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_AutoWritePage
</UL>

<P><STRONG><a name="[1a4]"></a>SST26_ReadBuffer</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, spi_flash.o(i.SST26_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SST26_ReadBuffer &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_SendByte
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WriteEnable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WaitForWriteEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_AutoWritePage
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolFlashOperation
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ChargeRecodeFlashOperation
</UL>

<P><STRONG><a name="[32e]"></a>SST26_ReadID</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spi_flash.o(i.SST26_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SST26_ReadID &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_SendByte
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WriteEnable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WaitForWriteEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_ReadID_Test
</UL>

<P><STRONG><a name="[32c]"></a>SST26_ReadID_Test</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_flash.o(i.SST26_ReadID_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SST26_ReadID_Test &rArr; SST26_ReadID &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_Init
</UL>

<P><STRONG><a name="[327]"></a>SST26_SendByte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, spi_flash.o(i.SST26_SendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_ReadBuffer
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_ReadID
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_PageWrite
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_EraseSector
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WriteEnable
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WaitForWriteEnd
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_UnlockGlobal
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_CmpData
</UL>

<P><STRONG><a name="[1a3]"></a>SST26_WriteBuffer</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, spi_flash.o(i.SST26_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_AutoWritePage
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolFlashOperation
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_ChargeRecodeFlashOperation
</UL>

<P><STRONG><a name="[b1]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2ab]"></a>SYSSet1_Send</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, connectccu_main.o(i.SYSSet1_Send))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_MaxOutCurDispose
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_MacMinVolDispose
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_MacMaxVolDispose
</UL>

<P><STRONG><a name="[2ac]"></a>SYSSet2_Send</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, connectccu_main.o(i.SYSSet2_Send))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_OutDcVolDispose
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_OutDcCurDispose
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_ModuleNumDispose
</UL>

<P><STRONG><a name="[2ad]"></a>SYSSet3_Send</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, connectccu_main.o(i.SYSSet3_Send))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu53_acinputupvalueDispose
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu53_acinputdownvalueDispose
</UL>

<P><STRONG><a name="[312]"></a>SearchMeterData</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, rs485meter.o(i.SearchMeterData))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = SearchMeterData &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeskCS
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMeterTask
</UL>

<P><STRONG><a name="[28d]"></a>SendCardMsg</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, displaymain.o(i.SendCardMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = SendCardMsg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCardEvent
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu3_16_CodeDispose
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu33
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu32
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu22
</UL>

<P><STRONG><a name="[295]"></a>SendElecLockMsg</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, displaymain.o(i.SendElecLockMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = SendElecLockMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunB
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunA
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent55
</UL>

<P><STRONG><a name="[2aa]"></a>SendHandSetMsg</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, displaymain.o(i.SendHandSetMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = SendHandSetMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunB
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunA
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu51_HANDBDispose
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu50_HANDADispose
</UL>

<P><STRONG><a name="[296]"></a>SendJustMsg</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, displaymain.o(i.SendJustMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = SendJustMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunB
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunA
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent59
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent58
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent57
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu60_Just2Dispose
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu60_Just1Dispose
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu59_Just2Dispose
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu59_Just1Dispose
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu58_Just2Dispose
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu58_Just1Dispose
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu57_Just2Dispose
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu57_Just1Dispose
</UL>

<P><STRONG><a name="[1bc]"></a>SendPricMsg</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, displaymain.o(i.SendPricMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = SendPricMsg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetPricEvent
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StartCharge
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvConectCCUAnalyze
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardDispose
</UL>

<P><STRONG><a name="[27b]"></a>SendStartChargeMsg</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, displaymain.o(i.SendStartChargeMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = SendStartChargeMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunB
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunA
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu51_HANDBDispose
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu50_HANDADispose
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispose_SendStartCharge
</UL>

<P><STRONG><a name="[1c0]"></a>SendStopChargeMsg</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, displaymain.o(i.SendStopChargeMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = SendStopChargeMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunB
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunA
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StopCharge
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent51
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYKeyEvent50
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispose_SOCThreshold
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardDispose
</UL>

<P><STRONG><a name="[318]"></a>Send_AT_CIPRXGET</STRONG> (Thumb, 74 bytes, Stack size 80 bytes, modulesim7600.o(i.Send_AT_CIPRXGET))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Send_AT_CIPRXGET &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ActRecv1_Ack
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_ActRecv0_Ack
</UL>

<P><STRONG><a name="[2a5]"></a>Send_AT_CSQ</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulesim7600.o(i.Send_AT_CSQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Send_AT_CSQ &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GSend
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[2fb]"></a>Send_ReStartover</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, connectccu_main.o(i.Send_ReStartover))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_StartOver
</UL>

<P><STRONG><a name="[2fc]"></a>Send_ReStopover</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, connectccu_main.o(i.Send_ReStopover))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_StopOver
</UL>

<P><STRONG><a name="[15a]"></a>ServiceSet_ControlGunA</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, connectccu_main.o(i.ServiceSet_ControlGunA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ServiceSet_ControlGunA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>ServiceSet_ControlGunB</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, connectccu_main.o(i.ServiceSet_ControlGunB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ServiceSet_ControlGunB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[1c4]"></a>SetCardInfoStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, card_cpu.o(i.SetCardInfoStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardDispose
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardAnalysis
</UL>

<P><STRONG><a name="[222]"></a>SetCardWorkStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, card_cpu.o(i.SetCardWorkStatus))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardAnalysis
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StartCard
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Query_Card
</UL>

<P><STRONG><a name="[246]"></a>SetChargingStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rs485meter.o(i.SetChargingStatus))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartBillingInit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingAnalyse
</UL>

<P><STRONG><a name="[273]"></a>SetCurMenu</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dispkeyfunction.o(i.SetCurMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SetCurMenu &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ParaInit
</UL>

<P><STRONG><a name="[313]"></a>SetMeterStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rs485meter.o(i.SetMeterStatus))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMeterTask
</UL>

<P><STRONG><a name="[21d]"></a>SetPowerChangeFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rs485meter.o(i.SetPowerChangeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterDataAnalyse
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculationBill
</UL>

<P><STRONG><a name="[256]"></a>SetVariColor</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dwinprotocol.o(i.SetVariColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = SetVariColor &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetDispUartStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowErr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowDivStatus
</UL>

<P><STRONG><a name="[245]"></a>StartBillingInit</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, rs485meter.o(i.StartBillingInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StartBillingInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurTime
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingStatus
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetChargingStatus
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurUnixTimestamp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingAnalyse
</UL>

<P><STRONG><a name="[27d]"></a>StopSend_Frame</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, connectccu_main.o(i.StopSend_Frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StopSend_Frame
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_ReStopOverFrame
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GDW_ReStartOverFrame
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_ReSysParaSet3
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_ReSysParaSet2
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolOperation_ReSysParaSet1
</UL>

<P><STRONG><a name="[15b]"></a>SysHandSet_ControlGunA</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, connectccu_main.o(i.SysHandSet_ControlGunA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysHandSet_ControlGunA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>SysHandSet_ControlGunB</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, connectccu_main.o(i.SysHandSet_ControlGunB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysHandSet_ControlGunB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(.text)
</UL>
<P><STRONG><a name="[154]"></a>TCU_Data_TimeOut</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, connectccu_main.o(i.TCU_Data_TimeOut))
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(.constdata)
</UL>
<P><STRONG><a name="[1d8]"></a>TCU_Data_Timing_Process</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, connectccu_main.o(i.TCU_Data_Timing_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TCU_Data_Timing_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>

<P><STRONG><a name="[236]"></a>TCU_FrameRx_GUNATimeout</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, waittimeout.o(i.TCU_FrameRx_GUNATimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = TCU_FrameRx_GUNATimeout &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecUnLocked_ControlGunA
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecLocked_ControlGunA
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStop_ControlGunA
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStart_ControlGunA
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Head_Recved
</UL>

<P><STRONG><a name="[238]"></a>TCU_FrameRx_GUNBTimeout</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, waittimeout.o(i.TCU_FrameRx_GUNBTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = TCU_FrameRx_GUNBTimeout &rArr; OSTimeGet
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecUnLocked_ControlGunB
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecLocked_ControlGunB
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStop_ControlGunB
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStart_ControlGunB
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Head_Recved
</UL>

<P><STRONG><a name="[11b]"></a>Task4GMain</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, 4gmain.o(i.Task4GMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Task4GMain &rArr; Connect_4G &rArr; ModuleSIM7600_ConnectServer &rArr; Module_ConnectServer &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IOOpen
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IOClose
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispEvent
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSendTaskEvent
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Connect_4G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_task_core)
</UL>
<P><STRONG><a name="[11d]"></a>Task4GRecv</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, 4grecv.o(i.Task4GRecv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Task4GRecv &rArr; GPRSRecv_HardwareInit &rArr; BSP_UARTConfigTimeInit &rArr; BSP_UARTTxDMAConfigInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MsgDeal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FreeOneMsg
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_RecvFrameDispose
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPRSRecv_HardwareInit
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600_RecvDesposeCmd
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetNetNotConect
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSendTaskEvent
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetModuleConnectState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_task_core)
</UL>
<P><STRONG><a name="[11c]"></a>Task4GSend</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, 4gsend.o(i.Task4GSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = Task4GSend &rArr; HFQG_SendStartAck &rArr; HFQGFreamSend &rArr; ModuleSIM7600_SendData &rArr; Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispControl
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReSendBill
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendStocpAck
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendStartAck
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendFrameDispose
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendDevStop
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQG_SendBill
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetResendBillState
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetResendBillState
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CSQ
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Status
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetModuleConnectState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_task_core)
</UL>
<P><STRONG><a name="[11a]"></a>TaskCardStk</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, card_cpu.o(i.TaskCardStk))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = TaskCardStk &rArr; CardAnalysis &rArr; Charge_StartCard &rArr; Dispose_LocalUnLock &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_Init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardAnalysis
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_HardwareInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_task_core)
</UL>
<P><STRONG><a name="[117]"></a>TaskCntCCUMain</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, connectccu_main.o(i.TaskCntCCUMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = TaskCntCCUMain &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitConnectCCUmessage
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitConnectCCUCAN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_task_core)
</UL>
<P><STRONG><a name="[116]"></a>TaskDisplay</STRONG> (Thumb, 410 bytes, Stack size 16 bytes, displaymain.o(i.TaskDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = TaskDisplay &rArr; DispPeriod &rArr; Disp_ShowRTC &rArr; Dis_ShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MsgDeal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FreeOneMsg
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStopChargeMsg
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StopCharge
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StartCharge
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HYDisplayMenu37
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DealWithKey
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ParaInit
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPeriod
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvConectCCUAnalyze
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardAnalyze
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_HardwareInit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayGunQRCode
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DisplayRecvDataAnalyze
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_task_core)
</UL>
<P><STRONG><a name="[114]"></a>TaskLED</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.TaskLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = TaskLED &rArr; BSP_LEDInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LEDWrite
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LEDInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_task_core)
</UL>
<P><STRONG><a name="[118]"></a>TaskMeterStk</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rs485meter.o(i.TaskMeterStk))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = TaskMeterStk &rArr; RS485MetterInit &rArr; BSP_UARTConfigInit &rArr; BSP_UARTTxDMAConfigInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMeterTask
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485MetterInit
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingInit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargingAnalyse
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculationRate
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalculationBill
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetMeterAddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_task_core)
</UL>
<P><STRONG><a name="[115]"></a>TaskPeriod</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, displaymain.o(i.TaskPeriod))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_task_core)
</UL>
<P><STRONG><a name="[110]"></a>TaskRMsgDisposeGunA</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, connectccu_main.o(i.TaskRMsgDisposeGunA))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = TaskRMsgDisposeGunA &rArr; WaitRecvCCUGunA &rArr; ReciveCCUFrame &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRecvCCUGunA
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGunAmessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(i.TaskCntCCUMain)
</UL>
<P><STRONG><a name="[111]"></a>TaskRMsgDisposeGunB</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, connectccu_main.o(i.TaskRMsgDisposeGunB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = TaskRMsgDisposeGunB &rArr; WaitRecvCCUGunB &rArr; ReciveCCUFrame &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitRecvCCUGunB
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGunBmessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(i.TaskCntCCUMain)
</UL>
<P><STRONG><a name="[119]"></a>TaskRTC</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, rtc_task.o(i.TaskRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TaskRTC &rArr; BSP_RTCSetTime &rArr; RTC_TimeAndDate_Set &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ByteBcdToHex
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitRTC
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCSetTime
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCGetTime
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Change2Unixstamp
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.init_task_core)
</UL>
<P><STRONG><a name="[10f]"></a>TaskSendTCUFrame</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, connectccu_main.o(i.TaskSendTCUFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = TaskSendTCUFrame &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> connectccu_main.o(i.TaskCntCCUMain)
</UL>
<P><STRONG><a name="[332]"></a>TeskCS</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, dealwithchar.o(i.TeskCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TeskCS
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchMeterData
</UL>

<P><STRONG><a name="[e9]"></a>UART4_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = UART4_IRQHandler &rArr; UART_ISR &rArr; UART_TxISR &rArr; UART_PopBytes &rArr; UART_PopOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>UART5_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = UART5_IRQHandler &rArr; UART_ISR &rArr; UART_TxISR &rArr; UART_PopBytes &rArr; UART_PopOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[2a2]"></a>UART_4GWrite</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, 4gmain.o(i.UART_4GWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CSQ
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_SetCIPRXGET
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NOTCIPMODE
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NETOPEN
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_NETCLOSE
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPSEND
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIMI
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CGDCONT
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recv_AT_EnterATCmd_Ack
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
</UL>

<P><STRONG><a name="[22c]"></a>UART_FreeOneMsg</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, bsp_uart.o(i.UART_FreeOneMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = UART_FreeOneMsg &rArr; OSMemPut
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComPort
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemPut
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCardmessage
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardUart_MsgFree
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMeterTask
</UL>

<P><STRONG><a name="[345]"></a>UART_ISR</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, bsp_uart.o(i.UART_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = UART_ISR &rArr; UART_TxISR &rArr; UART_PopBytes &rArr; UART_PopOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComPort
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[22b]"></a>UART_MsgDeal</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, bsp_uart.o(i.UART_MsgDeal))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = UART_MsgDeal
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCardmessage
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardUart_MsgFree
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMeterTask
</UL>

<P><STRONG><a name="[1d6]"></a>UART_ReceiveMsgHook</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, bsp_uart.o(i.UART_ReceiveMsgHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = UART_ReceiveMsgHook &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmpty
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMemGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
</UL>

<P><STRONG><a name="[da]"></a>USART1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; UART_ISR &rArr; UART_TxISR &rArr; UART_PopBytes &rArr; UART_PopOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>USART2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; UART_ISR &rArr; UART_TxISR &rArr; UART_PopBytes &rArr; UART_PopOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>USART3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; UART_ISR &rArr; UART_TxISR &rArr; UART_PopBytes &rArr; UART_PopOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>USART6_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = USART6_IRQHandler &rArr; UART_ISR &rArr; UART_TxISR &rArr; UART_PopBytes &rArr; UART_PopOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[252]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
</UL>

<P><STRONG><a name="[347]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
</UL>

<P><STRONG><a name="[207]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
</UL>

<P><STRONG><a name="[208]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[346]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
</UL>

<P><STRONG><a name="[206]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR
</UL>

<P><STRONG><a name="[205]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
</UL>

<P><STRONG><a name="[348]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
</UL>

<P><STRONG><a name="[210]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1]"></a>USBH_Connected</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_Connected))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>USBH_Disconnected</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_Disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Disconnected &rArr; USB_OTG_DisableGlobalInt
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_BSP_DriveVBUS
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_DisableGlobalInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[2f6]"></a>USBH_OTG_ISR_Handler</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USBH_OTG_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USBH_OTG_ISR_Handler &rArr; USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_sof_ISR
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_Disconnect_ISR
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadCoreItr
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[4]"></a>USBH_PortDisabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_PortDisabled))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBH_PortEnabled</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_PortEnabled))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBH_SOF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SOF))
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.data)
</UL>
<P><STRONG><a name="[350]"></a>USB_OTG_BSP_DriveVBUS</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usb_bsp.o(i.USB_OTG_BSP_DriveVBUS))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Disconnected
</UL>

<P><STRONG><a name="[351]"></a>USB_OTG_DisableGlobalInt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_DisableGlobalInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Disconnected
</UL>

<P><STRONG><a name="[35c]"></a>USB_OTG_GetMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_IsHostMode
</UL>

<P><STRONG><a name="[361]"></a>USB_OTG_HC_DoPing</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_core.o(i.USB_OTG_HC_DoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
</UL>

<P><STRONG><a name="[360]"></a>USB_OTG_HC_Halt</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, usb_core.o(i.USB_OTG_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
</UL>

<P><STRONG><a name="[363]"></a>USB_OTG_InitFSLSPClkSel</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usb_core.o(i.USB_OTG_InitFSLSPClkSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_port_ISR
</UL>

<P><STRONG><a name="[352]"></a>USB_OTG_IsHostMode</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, usb_core.o(i.USB_OTG_IsHostMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USB_OTG_IsHostMode
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_GetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[353]"></a>USB_OTG_ReadCoreItr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadCoreItr))
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[35d]"></a>USB_OTG_ReadHostAllChannels_intr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usb_core.o(i.USB_OTG_ReadHostAllChannels_intr))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[364]"></a>USB_OTG_ReadPacket</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, usb_core.o(i.USB_OTG_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_rx_qlvl_ISR
</UL>

<P><STRONG><a name="[362]"></a>USB_OTG_WritePacket</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, usb_core.o(i.USB_OTG_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_ptxfempty_ISR
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_nptxfempty_ISR
</UL>

<P><STRONG><a name="[b0]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429_439xx.o(RESET)
</UL>
<P><STRONG><a name="[23b]"></a>WaitCardmessage</STRONG> (Thumb, 622 bytes, Stack size 40 bytes, card_cpu.o(i.WaitCardmessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = WaitCardmessage &rArr; UART_MsgDeal
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_MsgDeal
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FreeOneMsg
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBCC
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispose_LocalUnLock
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StartCard
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Query_Card
</UL>

<P><STRONG><a name="[33f]"></a>WaitConnectCCUmessage</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, connectccu_main.o(i.WaitConnectCCUmessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = WaitConnectCCUmessage &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCntCCUMain
</UL>

<P><STRONG><a name="[340]"></a>WaitGunAmessage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, connectccu_main.o(i.WaitGunAmessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = WaitGunAmessage &rArr; OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RevCaseDealGunA
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRMsgDisposeGunA
</UL>

<P><STRONG><a name="[341]"></a>WaitGunBmessage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, connectccu_main.o(i.WaitGunBmessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = WaitGunBmessage &rArr; OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RevCaseDealGunB
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRMsgDisposeGunB
</UL>

<P><STRONG><a name="[237]"></a>WaitRecvCCUGunA</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, connectccu_main.o(i.WaitRecvCCUGunA))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = WaitRecvCCUGunA &rArr; ReciveCCUFrame &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReciveCCUFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRMsgDisposeGunA
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecUnLocked_ControlGunA
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecLocked_ControlGunA
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStop_ControlGunA
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStart_ControlGunA
</UL>

<P><STRONG><a name="[239]"></a>WaitRecvCCUGunB</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, connectccu_main.o(i.WaitRecvCCUGunB))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = WaitRecvCCUGunB &rArr; ReciveCCUFrame &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReciveCCUFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRMsgDisposeGunB
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecUnLocked_ControlGunB
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ElecLocked_ControlGunB
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStop_ControlGunB
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeStart_ControlGunB
</UL>

<P><STRONG><a name="[367]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[389]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[235]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRTC
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_task_core
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunB
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToConectCCuTeskMsgGunA
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu53_acinputupvalueDispose
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu53_acinputdownvalueDispose
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu53_MeterAddBDispose
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu53_MeterAddADispose
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_UseGunDispose
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_SOCDispose
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_ProNumDispose
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_OutDcVolDispose
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_OutDcCurDispose
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_ModuleNumDispose
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_MaxOutCurDispose
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_MacMinVolDispose
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_MacMaxVolDispose
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu52_DevnumDispose
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu48_PrcDispose
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ParaInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecode_Dispose
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardMsg
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485MetterInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPricMsg
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPSEND
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
</UL>

<P><STRONG><a name="[38a]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[38b]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[369]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[38c]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[259]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPSEND
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPCLOSE
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_ConnectServer
</UL>

<P><STRONG><a name="[38d]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[38e]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[192]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[38f]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[390]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[391]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[392]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[36f]"></a>bsp_CfgSPI2</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bsp_spi.o(i.bsp_CfgSPI2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_CfgSPI2 &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPI2
</UL>

<P><STRONG><a name="[342]"></a>bsp_InitRTC</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bsp_rtc.o(i.bsp_InitRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsp_InitRTC &rArr; RTC_Config &rArr; RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskRTC
</UL>

<P><STRONG><a name="[32b]"></a>bsp_InitSPI2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_spi.o(i.bsp_InitSPI2))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsp_InitSPI2 &rArr; bsp_InitSPI2_IO &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPI2_IO
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_CfgSPI2
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_Init
</UL>

<P><STRONG><a name="[375]"></a>bsp_InitSPI2_IO</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, bsp_spi.o(i.bsp_InitSPI2_IO))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_InitSPI2_IO &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitSPI2
</UL>

<P><STRONG><a name="[112]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_debug_usart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[281]"></a>get_xor_Data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hfqgframe.o(i.get_xor_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_xor_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HFQGFreamSend
</UL>

<P><STRONG><a name="[107]"></a>main</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTick_Init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[33a]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[217]"></a>CheckITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CheckITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[309]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>

<P><STRONG><a name="[30d]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[11e]"></a>init_task_core</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, main.o(i.init_task_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = init_task_core &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_Init
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_USART_Config
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_IOInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2cc]"></a>OSMutex_RdyAtPrio</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, ucos_ii.o(i.OSMutex_RdyAtPrio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSMutex_RdyAtPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
</UL>

<P><STRONG><a name="[2f1]"></a>OSTmr_InitTask</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ucos_ii.o(i.OSTmr_InitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[2f3]"></a>OSTmr_Link</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, ucos_ii.o(i.OSTmr_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[10c]"></a>OSTmr_Task</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, ucos_ii.o(i.OSTmr_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ucos_ii.o(i.OSTmr_InitTask)
</UL>
<P><STRONG><a name="[2f2]"></a>OSTmr_Unlink</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, ucos_ii.o(i.OSTmr_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[2b8]"></a>OS_InitEventList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ucos_ii.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[2b5]"></a>OS_InitMisc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ucos_ii.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[2b6]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, ucos_ii.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[2b7]"></a>OS_InitTCBList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ucos_ii.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[2bc]"></a>OS_InitTaskIdle</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ucos_ii.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[2bd]"></a>OS_InitTaskStat</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ucos_ii.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit &rArr; OSTaskCreateHook
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[2c0]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ucos_ii.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[1fe]"></a>GetComPort</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_uart.o(i.GetComPort))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FreeOneMsg
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
</UL>

<P><STRONG><a name="[1ff]"></a>GetCommHandle</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_uart.o(i.GetCommHandle))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
</UL>

<P><STRONG><a name="[11f]"></a>UART1_PIN_CFG</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp_uart.o(i.UART1_PIN_CFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART1_PIN_CFG &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>UART2_PIN_CFG</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, bsp_uart.o(i.UART2_PIN_CFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART2_PIN_CFG &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>UART3_PIN_CFG</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp_uart.o(i.UART3_PIN_CFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART3_PIN_CFG &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>UART4_PIN_CFG</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_uart.o(i.UART4_PIN_CFG))
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>UART5_PIN_CFG</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, bsp_uart.o(i.UART5_PIN_CFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART5_PIN_CFG &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>UART6_PIN_CFG</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsp_uart.o(i.UART6_PIN_CFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART6_PIN_CFG &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>UART7_PIN_CFG</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, bsp_uart.o(i.UART7_PIN_CFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART7_PIN_CFG &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>UART8_PIN_CFG</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsp_uart.o(i.UART8_PIN_CFG))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = UART8_PIN_CFG &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_uart.o(.constdata)
</UL>
<P><STRONG><a name="[34b]"></a>UART_PopBytes</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bsp_uart.o(i.UART_PopBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = UART_PopBytes &rArr; UART_PopOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PopOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR
</UL>

<P><STRONG><a name="[34c]"></a>UART_PopOneByte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_uart.o(i.UART_PopOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = UART_PopOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PopBytes
</UL>

<P><STRONG><a name="[20f]"></a>UART_PushBytes</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bsp_uart.o(i.UART_PushBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PushOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR
</UL>

<P><STRONG><a name="[34e]"></a>UART_PushOneByte</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp_uart.o(i.UART_PushOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFull
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PushBytes
</UL>

<P><STRONG><a name="[349]"></a>UART_RxISR</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, bsp_uart.o(i.UART_RxISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = UART_RxISR &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PushBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
</UL>

<P><STRONG><a name="[20e]"></a>UART_RxMode</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bsp_uart.o(i.UART_RxMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_RxMode
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxISR
</UL>

<P><STRONG><a name="[34a]"></a>UART_TxISR</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, bsp_uart.o(i.UART_TxISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = UART_TxISR &rArr; UART_PopBytes &rArr; UART_PopOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_RDCmd
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxMode
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PopBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ISR
</UL>

<P><STRONG><a name="[127]"></a>RS485_RD2Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bsp_rs485.o(i.RS485_RD2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RS485_RD2Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_rs485.o(.constdata)
</UL>
<P><STRONG><a name="[2fe]"></a>SearchRS485Table</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, bsp_rs485.o(i.SearchRS485Table))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_RDCmd
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_Init
</UL>

<P><STRONG><a name="[321]"></a>SST26_AutoWritePage</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, spi_flash.o(i.SST26_AutoWritePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_ReadBuffer
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_PageWrite
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_EraseSector
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_NeedErase
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_CmpData
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WriteBuffer
</UL>

<P><STRONG><a name="[326]"></a>SST26_CmpData</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, spi_flash.o(i.SST26_CmpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SST26_CmpData &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_AutoWritePage
</UL>

<P><STRONG><a name="[323]"></a>SST26_NeedErase</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi_flash.o(i.SST26_NeedErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SST26_NeedErase
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_AutoWritePage
</UL>

<P><STRONG><a name="[32d]"></a>SST26_UnlockGlobal</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi_flash.o(i.SST26_UnlockGlobal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SST26_UnlockGlobal &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_SendByte
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WaitForWriteEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_Init
</UL>

<P><STRONG><a name="[329]"></a>SST26_WaitForWriteEnd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, spi_flash.o(i.SST26_WaitForWriteEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_ReadBuffer
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_ReadID
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_PageWrite
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_EraseSector
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WriteEnable
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_UnlockGlobal
</UL>

<P><STRONG><a name="[328]"></a>SST26_WriteEnable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi_flash.o(i.SST26_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_SendByte
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WaitForWriteEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_ReadBuffer
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_ReadID
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_PageWrite
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_EraseSector
</UL>

<P><STRONG><a name="[35a]"></a>USB_OTG_USBH_handle_Disconnect_ISR</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_Disconnect_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_Disconnect_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[35b]"></a>USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_OTG_USBH_handle_IncompletePeriodicXfer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[358]"></a>USB_OTG_USBH_handle_hc_ISR</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = USB_OTG_USBH_handle_hc_ISR &rArr; USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_Out_ISR
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_n_In_ISR
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadHostAllChannels_intr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[35e]"></a>USB_OTG_USBH_handle_hc_n_In_ISR</STRONG> (Thumb, 1054 bytes, Stack size 40 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_In_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_OTG_USBH_handle_hc_n_In_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[35f]"></a>USB_OTG_USBH_handle_hc_n_Out_ISR</STRONG> (Thumb, 952 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_hc_n_Out_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USB_OTG_USBH_handle_hc_n_Out_ISR &rArr; USB_OTG_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_Halt
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_HC_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_USBH_handle_hc_ISR
</UL>

<P><STRONG><a name="[356]"></a>USB_OTG_USBH_handle_nptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_nptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_USBH_handle_nptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[359]"></a>USB_OTG_USBH_handle_port_ISR</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_port_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USB_OTG_USBH_handle_port_ISR &rArr; USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[357]"></a>USB_OTG_USBH_handle_ptxfempty_ISR</STRONG> (Thumb, 302 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_ptxfempty_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_OTG_USBH_handle_ptxfempty_ISR &rArr; USB_OTG_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[355]"></a>USB_OTG_USBH_handle_rx_qlvl_ISR</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_rx_qlvl_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_OTG_USBH_handle_rx_qlvl_ISR &rArr; USB_OTG_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_OTG_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[354]"></a>USB_OTG_USBH_handle_sof_ISR</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usb_hcd_int.o(i.USB_OTG_USBH_handle_sof_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_OTG_USBH_handle_sof_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OTG_ISR_Handler
</UL>

<P><STRONG><a name="[26d]"></a>Dwin_FrameHead</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dwinprotocol.o(i.Dwin_FrameHead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Dwin_FrameHead &rArr; LCD_SendTwoBytes &rArr; LCD_SendByteToBuf &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTime
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraPerprintBackImage
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
</UL>

<P><STRONG><a name="[29a]"></a>LCD_SendBufLenClear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dwinprotocol.o(i.LCD_SendBufLenClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LCD_SendBufLenClear &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendToUart
</UL>

<P><STRONG><a name="[26e]"></a>LCD_SendByteToBuf</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dwinprotocol.o(i.LCD_SendByteToBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LCD_SendByteToBuf &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTime
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraPerprintBackImage
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
</UL>

<P><STRONG><a name="[29b]"></a>LCD_SendFourBytes</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dwinprotocol.o(i.LCD_SendFourBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LCD_SendFourBytes &rArr; LCD_SendTwoBytes &rArr; LCD_SendByteToBuf &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendTwoBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
</UL>

<P><STRONG><a name="[270]"></a>LCD_SendToUart</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, dwinprotocol.o(i.LCD_SendToUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendBufLenClear
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetDispUartStatus
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispUartStatus
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTime
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PraPerprintBackImage
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyControl
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
</UL>

<P><STRONG><a name="[26f]"></a>LCD_SendTwoBytes</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dwinprotocol.o(i.LCD_SendTwoBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LCD_SendTwoBytes &rArr; LCD_SendByteToBuf &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendByteToBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SendFourBytes
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_FrameHead
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariColor
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDwinVariable
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintTime
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayQRCode
</UL>

<P><STRONG><a name="[1b4]"></a>APP_GetYxYcData</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, displaymain.o(i.APP_GetYxYcData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = APP_GetYxYcData &rArr; APP_GetCcuYC
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCcuYX2
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCcuYX1
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCcuYC
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPeriod
</UL>

<P><STRONG><a name="[1b8]"></a>APP_RecvCardAnalyze</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, displaymain.o(i.APP_RecvCardAnalyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = APP_RecvCardAnalyze &rArr; APP_RecvCardDispose &rArr; ChargeRecode_Dispose &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardDispose
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
</UL>

<P><STRONG><a name="[1b9]"></a>APP_RecvCardDispose</STRONG> (Thumb, 766 bytes, Stack size 32 bytes, displaymain.o(i.APP_RecvCardDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = APP_RecvCardDispose &rArr; ChargeRecode_Dispose &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStopChargeMsg
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum32uVariable
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecode_Dispose
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCardInfoStatus
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGunCardInfo
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardInfo
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPricMsg
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_EndChargeDate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardAnalyze
</UL>

<P><STRONG><a name="[1c5]"></a>APP_RecvConectCCUAnalyze</STRONG> (Thumb, 940 bytes, Stack size 16 bytes, displaymain.o(i.APP_RecvConectCCUAnalyze))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = APP_RecvConectCCUAnalyze &rArr; ChargeRecode_Dispose &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Net_StopCharge
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurTime
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChargeRecode_Dispose
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCcuStopOver
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCcuStartOver
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Get4GMainEvent
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendPricMsg
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
</UL>

<P><STRONG><a name="[1bd]"></a>ChargeRecode_Dispose</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, displaymain.o(i.ChargeRecode_Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ChargeRecode_Dispose &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingInfo
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGunCardInfo
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetNetMoney
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetBatchNum
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RWChargeRecode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvConectCCUAnalyze
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvCardDispose
</UL>

<P><STRONG><a name="[24f]"></a>CountDownDispose</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, displaymain.o(i.CountDownDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = CountDownDispose &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintNum16uVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPeriod
</UL>

<P><STRONG><a name="[2a9]"></a>CountPeriodSumTime</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, displaymain.o(i.CountPeriodSumTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CountPeriodSumTime
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Munu48_PrcDispose
</UL>

<P><STRONG><a name="[1a8]"></a>DealWithVari</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, displaymain.o(i.DealWithVari))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DealWithVari
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_DisplayRecvDataAnalyze
</UL>

<P><STRONG><a name="[25a]"></a>DispPeriod</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, displaymain.o(i.DispPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = DispPeriod &rArr; Disp_ShowRTC &rArr; Dis_ShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurMenu
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_NetPageDispos
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Period_GerDivStatus
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispose_SendStartCharge
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispose_SOCThreshold
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disp_ShowRTC
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_State
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_ChargeingDate
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_CardDate
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountDownDispose
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetYxYcData
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
</UL>

<P><STRONG><a name="[262]"></a>DispShow_CSQState</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, displaymain.o(i.DispShow_CSQState))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = DispShow_CSQState &rArr; PrintIcon &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCSQNum
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_State
</UL>

<P><STRONG><a name="[25e]"></a>DispShow_CardDate</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, displaymain.o(i.DispShow_CardDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = DispShow_CardDate &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetWorkState
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPeriod
</UL>

<P><STRONG><a name="[25d]"></a>DispShow_ChargeingDate</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, displaymain.o(i.DispShow_ChargeingDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = DispShow_ChargeingDate &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChargingInfo
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGunCardInfo
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetWorkState
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPeriod
</UL>

<P><STRONG><a name="[266]"></a>DispShow_NetState</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, displaymain.o(i.DispShow_NetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = DispShow_NetState &rArr; PrintIcon &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetNetState
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_State
</UL>

<P><STRONG><a name="[1cb]"></a>DispShow_Recode</STRONG> (Thumb, 658 bytes, Stack size 16 bytes, displaymain.o(i.DispShow_Recode))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = DispShow_Recode &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCDtoHEX
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintStr
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowCopy
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectUpNChargeRecode
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectNextNChargeRecode
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SelectCurChargeRecode
</UL>

<P><STRONG><a name="[25f]"></a>DispShow_State</STRONG> (Thumb, 744 bytes, Stack size 16 bytes, displaymain.o(i.DispShow_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = DispShow_State &rArr; Dis_ShowErr &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetGunState
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetErrState
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIcon
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_NetState
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispShow_CSQState
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowErr
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPeriod
</UL>

<P><STRONG><a name="[25c]"></a>Disp_ShowRTC</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, displaymain.o(i.Disp_ShowRTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Disp_ShowRTC &rArr; Dis_ShowTime &rArr; PrintStr &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCurTime
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowTime
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPeriod
</UL>

<P><STRONG><a name="[272]"></a>Display_ParaInit</STRONG> (Thumb, 954 bytes, Stack size 16 bytes, displaymain.o(i.Display_ParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Display_ParaInit &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCurMenu
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetPara3
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetPara2
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetPara1
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskDisplay
</UL>

<P><STRONG><a name="[260]"></a>Dispose_SOCThreshold</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, displaymain.o(i.Dispose_SOCThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = Dispose_SOCThreshold &rArr; SendStopChargeMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStopChargeMsg
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetWorkState
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPeriod
</UL>

<P><STRONG><a name="[261]"></a>Dispose_SendStartCharge</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, displaymain.o(i.Dispose_SendStartCharge))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = Dispose_SendStartCharge &rArr; SendStartChargeMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargeMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPeriod
</UL>

<P><STRONG><a name="[128]"></a>Munu3_16_CodeDispose</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, displaymain.o(i.Munu3_16_CodeDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Munu3_16_CodeDispose &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCardMsg
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardWorkStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>Munu3_CodeDispose</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, displaymain.o(i.Munu3_CodeDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Munu3_CodeDispose &rArr; DisplayCommonMenu &rArr; PrintNum16uVariable &rArr; LCD_SendToUart &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayCommonMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>Munu48_PrcDispose</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, displaymain.o(i.Munu48_PrcDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = Munu48_PrcDispose &rArr; Display_PricSet &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_PricSet
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dis_ShowStatus
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountPeriodSumTime
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>Munu50_HANDADispose</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, displaymain.o(i.Munu50_HANDADispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = Munu50_HANDADispose &rArr; SendStartChargeMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargeMsg
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHandSetMsg
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetWorkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>Munu51_HANDBDispose</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, displaymain.o(i.Munu51_HANDBDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = Munu51_HANDBDispose &rArr; SendStartChargeMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargeMsg
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHandSetMsg
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetWorkState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>Munu52_DevnumDispose</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, displaymain.o(i.Munu52_DevnumDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Munu52_DevnumDispose &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>Munu52_MacMaxVolDispose</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, displaymain.o(i.Munu52_MacMaxVolDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Munu52_MacMaxVolDispose &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSSet1_Send
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetPara1
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>Munu52_MacMinVolDispose</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, displaymain.o(i.Munu52_MacMinVolDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Munu52_MacMinVolDispose &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSSet1_Send
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetPara1
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>Munu52_MaxOutCurDispose</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, displaymain.o(i.Munu52_MaxOutCurDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Munu52_MaxOutCurDispose &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSSet1_Send
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetPara1
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>Munu52_ModuleNumDispose</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, displaymain.o(i.Munu52_ModuleNumDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Munu52_ModuleNumDispose &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSSet2_Send
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetPara2
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>Munu52_OutDcCurDispose</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, displaymain.o(i.Munu52_OutDcCurDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Munu52_OutDcCurDispose &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSSet2_Send
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetPara2
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>Munu52_OutDcVolDispose</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, displaymain.o(i.Munu52_OutDcVolDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Munu52_OutDcVolDispose &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSSet2_Send
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetPara2
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>Munu52_ProNumDispose</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, displaymain.o(i.Munu52_ProNumDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Munu52_ProNumDispose &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>Munu52_SOCDispose</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, displaymain.o(i.Munu52_SOCDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Munu52_SOCDispose &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>Munu52_UseGunDispose</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, displaymain.o(i.Munu52_UseGunDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Munu52_UseGunDispose &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>Munu53_MeterAddADispose</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, displaymain.o(i.Munu53_MeterAddADispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Munu53_MeterAddADispose &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>Munu53_MeterAddBDispose</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, displaymain.o(i.Munu53_MeterAddBDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Munu53_MeterAddBDispose &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>Munu53_acinputdownvalueDispose</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, displaymain.o(i.Munu53_acinputdownvalueDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Munu53_acinputdownvalueDispose &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSSet3_Send
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetPara3
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>Munu53_acinputupvalueDispose</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, displaymain.o(i.Munu53_acinputupvalueDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Munu53_acinputupvalueDispose &rArr; APP_FlashOperation &rArr; ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSSet3_Send
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_SetPara3
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>Munu54_SetTimeDispose</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, displaymain.o(i.Munu54_SetTimeDispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Munu54_SetTimeDispose &rArr; BSP_RTCSetTime &rArr; RTC_TimeAndDate_Set &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEXtoBCD
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTCSetTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>Munu57_Just1Dispose</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, displaymain.o(i.Munu57_Just1Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = Munu57_Just1Dispose &rArr; SendJustMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJustMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>Munu57_Just2Dispose</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, displaymain.o(i.Munu57_Just2Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = Munu57_Just2Dispose &rArr; SendJustMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJustMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>Munu58_Just1Dispose</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, displaymain.o(i.Munu58_Just1Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = Munu58_Just1Dispose &rArr; SendJustMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJustMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>Munu58_Just2Dispose</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, displaymain.o(i.Munu58_Just2Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = Munu58_Just2Dispose &rArr; SendJustMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJustMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>Munu59_Just1Dispose</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, displaymain.o(i.Munu59_Just1Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = Munu59_Just1Dispose &rArr; SendJustMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJustMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>Munu59_Just2Dispose</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, displaymain.o(i.Munu59_Just2Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = Munu59_Just2Dispose &rArr; SendJustMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJustMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>Munu60_Just1Dispose</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, displaymain.o(i.Munu60_Just1Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = Munu60_Just1Dispose &rArr; SendJustMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJustMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>Munu60_Just2Dispose</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, displaymain.o(i.Munu60_Just2Dispose))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = Munu60_Just2Dispose &rArr; SendJustMsg &rArr; SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJustMsg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> displaymain.o(.constdata)
</UL>
<P><STRONG><a name="[25b]"></a>Period_GerDivStatus</STRONG> (Thumb, 1050 bytes, Stack size 8 bytes, displaymain.o(i.Period_GerDivStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Period_GerDivStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMeterStatus
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetCcuComState
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispPeriod
</UL>

<P><STRONG><a name="[334]"></a>SendToConectCCuTeskMsgGunA</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, displaymain.o(i.SendToConectCCuTeskMsgGunA))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = SendToConectCCuTeskMsgGunA &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetConnectccuGunAEvent
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStopChargeMsg
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJustMsg
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendElecLockMsg
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargeMsg
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHandSetMsg
</UL>

<P><STRONG><a name="[335]"></a>SendToConectCCuTeskMsgGunB</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, displaymain.o(i.SendToConectCCuTeskMsgGunB))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = SendToConectCCuTeskMsgGunB &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetConnectccuGunBEvent
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStopChargeMsg
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendJustMsg
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendElecLockMsg
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendStartChargeMsg
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendHandSetMsg
</UL>

<P><STRONG><a name="[227]"></a>CardNum_Judge</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, card_cpu.o(i.CardNum_Judge))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CardNum_Judge &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
</UL>

<P><STRONG><a name="[22e]"></a>Card_HardwareInit</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, card_cpu.o(i.Card_HardwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Card_HardwareInit &rArr; BSP_UARTConfigInit &rArr; BSP_UARTTxDMAConfigInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigInit
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskCardStk
</UL>

<P><STRONG><a name="[224]"></a>Charge_Query_Card</STRONG> (Thumb, 520 bytes, Stack size 8 bytes, card_cpu.o(i.Charge_Query_Card))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Charge_Query_Card &rArr; Send_AuthKey &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LEDWrite
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_FrameRx_Timeout
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCardmessage
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCardWorkStatus
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardInfoStatus
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardUart_MsgFree
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReadBlock
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AuthKey
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ActiveCard
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMsg_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardAnalysis
</UL>

<P><STRONG><a name="[225]"></a>Charge_StartCard</STRONG> (Thumb, 674 bytes, Stack size 32 bytes, card_cpu.o(i.Charge_StartCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Charge_StartCard &rArr; Dispose_LocalUnLock &rArr; APP_RWChargeRecode &rArr; APP_ChargeRecodeFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LEDWrite
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_FrameRx_Timeout
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCardmessage
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCardWorkStatus
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardInfoStatus
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispose_LocalUnLock
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardUart_MsgFree
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WriterBlock
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ReadBlock
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AuthKey
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ActiveCard
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMsg_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardAnalysis
</UL>

<P><STRONG><a name="[226]"></a>Charge_StopCard</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, card_cpu.o(i.Charge_StopCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Charge_StopCard &rArr; Send_WriterBlock &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LEDWrite
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Card_FrameRx_Timeout
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitCardmessage
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCardWorkStatus
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCardInfoStatus
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardUart_MsgFree
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_WriterBlock
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_SetValue
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AuthKey
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_ActiveCard
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Money_Cal
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMsg_Send
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardNum_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CardAnalysis
</UL>

<P><STRONG><a name="[23e]"></a>DispMsg_Send</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, card_cpu.o(i.DispMsg_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = DispMsg_Send &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetDispEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StartCard
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Query_Card
</UL>

<P><STRONG><a name="[242]"></a>Money_Cal</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, card_cpu.o(i.Money_Cal))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
</UL>

<P><STRONG><a name="[23a]"></a>Send_ActiveCard</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, card_cpu.o(i.Send_ActiveCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Send_ActiveCard &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBCC
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StartCard
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Query_Card
</UL>

<P><STRONG><a name="[23c]"></a>Send_AuthKey</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, card_cpu.o(i.Send_AuthKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Send_AuthKey &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBCC
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StartCard
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Query_Card
</UL>

<P><STRONG><a name="[23d]"></a>Send_ReadBlock</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, card_cpu.o(i.Send_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Send_ReadBlock &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBCC
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StartCard
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_Query_Card
</UL>

<P><STRONG><a name="[243]"></a>Send_SetValue</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, card_cpu.o(i.Send_SetValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Send_SetValue &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBCC
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dispose_LocalUnLock
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
</UL>

<P><STRONG><a name="[241]"></a>Send_WriterBlock</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, card_cpu.o(i.Send_WriterBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Send_WriterBlock &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTWrite
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalcBCC
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StopCard
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charge_StartCard
</UL>

<P><STRONG><a name="[1ab]"></a>ProtocolFlashOperation</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, flashdatadeal.o(i.ProtocolFlashOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ProtocolFlashOperation &rArr; SST26_WriteBuffer &rArr; SST26_AutoWritePage &rArr; SST26_PageWrite &rArr; SST26_WriteEnable &rArr; SST26_WaitForWriteEnd &rArr; SST26_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_WriteBuffer
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SST26_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
</UL>

<P><STRONG><a name="[1aa]"></a>SearchParaManagementTable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, flashdatadeal.o(i.SearchParaManagementTable))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_FlashOperation
</UL>

<P><STRONG><a name="[248]"></a>Connect_4G</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, 4gmain.o(i.Connect_4G))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Connect_4G &rArr; ModuleSIM7600_ConnectServer &rArr; Module_ConnectServer &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CloseNet
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetSIM7600Status
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_GetModuleConnectState
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GMain
</UL>

<P><STRONG><a name="[2a0]"></a>Module_ConnectServer</STRONG> (Thumb, 98 bytes, Stack size 96 bytes, modulesim7600.o(i.Module_ConnectServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Module_ConnectServer &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
</UL>

<P><STRONG><a name="[17a]"></a>Recv_AT_CGDCONT_Ack</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, modulesim7600.o(i.Recv_AT_CGDCONT_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Recv_AT_CGDCONT_Ack &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>Recv_AT_CIMI_Ack</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, modulesim7600.o(i.Recv_AT_CIMI_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Recv_AT_CIMI_Ack &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>Recv_AT_CIPMODE_Ack</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, modulesim7600.o(i.Recv_AT_CIPMODE_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Recv_AT_CIPMODE_Ack &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>Recv_AT_CSQ_Ack</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, modulesim7600.o(i.Recv_AT_CSQ_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Recv_AT_CSQ_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>Recv_AT_ConnectServer0Cmd_Ack</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, modulesim7600.o(i.Recv_AT_ConnectServer0Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Recv_AT_ConnectServer0Cmd_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>Recv_AT_ConnectServer0_Ack</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, modulesim7600.o(i.Recv_AT_ConnectServer0_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Recv_AT_ConnectServer0_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>Recv_AT_ConnectServer1Cmd_Ack</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, modulesim7600.o(i.Recv_AT_ConnectServer1Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Recv_AT_ConnectServer1Cmd_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>Recv_AT_ConnectServer1_Ack</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, modulesim7600.o(i.Recv_AT_ConnectServer1_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Recv_AT_ConnectServer1_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>Recv_AT_EnterATCmd_Ack</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, modulesim7600.o(i.Recv_AT_EnterATCmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Recv_AT_EnterATCmd_Ack &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>Recv_AT_NETOPEN_Ack</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, modulesim7600.o(i.Recv_AT_NETOPEN_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Recv_AT_NETOPEN_Ack &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>Recv_AT_ReRecv0Cmd_Ack</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, modulesim7600.o(i.Recv_AT_ReRecv0Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Recv_AT_ReRecv0Cmd_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvDataControl
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>Recv_AT_ReRecv1Cmd_Ack</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, modulesim7600.o(i.Recv_AT_ReRecv1Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Recv_AT_ReRecv1Cmd_Ack &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_RecvDataControl
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>Recv_AT_SendAck0Cmd_Ack</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, modulesim7600.o(i.Recv_AT_SendAck0Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Recv_AT_SendAck0Cmd_Ack &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>Recv_AT_SendAck1Cmd_Ack</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, modulesim7600.o(i.Recv_AT_SendAck1Cmd_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Recv_AT_SendAck1Cmd_Ack &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>Recv_AT_SetReAct_Ack</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, modulesim7600.o(i.Recv_AT_SetReAct_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Recv_AT_SetReAct_Ack &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>Recv_ActRecv0_Ack</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, modulesim7600.o(i.Recv_ActRecv0_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Recv_ActRecv0_Ack &rArr; Send_AT_CIPRXGET &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[188]"></a>Recv_ActRecv1_Ack</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, modulesim7600.o(i.Recv_ActRecv1_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Recv_ActRecv1_Ack &rArr; Send_AT_CIPRXGET &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_AT_CIPRXGET
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modulesim7600.o(.constdata)
</UL>
<P><STRONG><a name="[2a6]"></a>Send_AT_CGDCONT</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulesim7600.o(i.Send_AT_CGDCONT))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Send_AT_CGDCONT &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[2a4]"></a>Send_AT_CIMI</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulesim7600.o(i.Send_AT_CIMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Send_AT_CIMI &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[31e]"></a>Send_AT_CIPCLOSE</STRONG> (Thumb, 82 bytes, Stack size 80 bytes, modulesim7600.o(i.Send_AT_CIPCLOSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = Send_AT_CIPCLOSE &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600CloseNet
</UL>

<P><STRONG><a name="[2a1]"></a>Send_AT_CIPSEND</STRONG> (Thumb, 82 bytes, Stack size 88 bytes, modulesim7600.o(i.Send_AT_CIPSEND))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Send_AT_CIPSEND &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_SendData
</UL>

<P><STRONG><a name="[31f]"></a>Send_AT_NETCLOSE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulesim7600.o(i.Send_AT_NETCLOSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Send_AT_NETCLOSE &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SIM7600Reset
</UL>

<P><STRONG><a name="[29f]"></a>Send_AT_NETOPEN</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulesim7600.o(i.Send_AT_NETOPEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Send_AT_NETOPEN &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModuleSIM7600_ConnectServer
</UL>

<P><STRONG><a name="[2a7]"></a>Send_AT_NOTCIPMODE</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulesim7600.o(i.Send_AT_NOTCIPMODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Send_AT_NOTCIPMODE &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[2a8]"></a>Send_AT_SetCIPRXGET</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modulesim7600.o(i.Send_AT_SetCIPRXGET))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Send_AT_SetCIPRXGET &rArr; UART_4GWrite &rArr; BSP_UARTWrite &rArr; UART_PushBytes &rArr; UART_PushOneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_4GWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_SIM7600Test
</UL>

<P><STRONG><a name="[27e]"></a>GPRSRecv_HardwareInit</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, 4grecv.o(i.GPRSRecv_HardwareInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = GPRSRecv_HardwareInit &rArr; BSP_UARTConfigTimeInit &rArr; BSP_UARTTxDMAConfigInit &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_UARTConfigTimeInit
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task4GRecv
</UL>

<P><STRONG><a name="[36a]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[368]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[36d]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[36c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[113]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
